{"ast":null,"code":"/* eslint-disable */\nimport { ref } from 'vue';\nimport CharacterCard from \"../Cards/CharacterCard\";\nimport CharacterGeneratorRoller from \"./CharacterGeneratorRoller\";\nimport { fetchCharacterName, fetchNameGenders, fetchNameStyles } from './NameGenerator';\nexport default {\n  components: {\n    CharacterCard,\n    CharacterGeneratorRoller\n  },\n  props: {\n    gameSystemKey: {\n      type: String\n    }\n  },\n  data() {\n    return {\n      baseUrl: 'http://localhost:3000/api/v1/character_generator',\n      characterName: \"\",\n      gameSystem: {},\n      // Want to get key from params, retrieve id, name, uses ancestry\n      loading: true\n    };\n  },\n  setup() {\n    const characterName = ref(\"\");\n    const selectedAncestry = ref(\"\");\n    const selectedClass = ref(\"\");\n    const selectedNameGender = ref(\"any\");\n    const selectedNameStyle = ref(\"\");\n    const sheetAncestry = ref(\"\");\n    const sheetClass = ref(\"\");\n    const availableAncestries = ref([]);\n    const availableClasses = ref([]);\n    const availableNameGenders = ref([]);\n    const availableNameStyles = ref([]);\n    const useAncestry = ref(false);\n    return {\n      availableAncestries,\n      availableClasses,\n      availableNameGenders,\n      availableNameStyles,\n      characterName,\n      selectedAncestry,\n      selectedClass,\n      selectedNameGender,\n      selectedNameStyle,\n      sheetAncestry,\n      sheetClass,\n      useAncestry\n    };\n  },\n  methods: {\n    fetchGameSystem() {\n      return fetch(`${this.baseUrl}/game_system/${this.gameSystemKey}`, {\n        method: 'get'\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        this.gameSystem = res.game_system;\n        this.loading = false;\n      });\n    },\n    fetchAncestries() {\n      fetch(`${this.baseUrl}/ancestries/${this.gameSystem.id}`, {\n        method: 'get'\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        this.availableAncestries = res.ancestries;\n        this.useAncestry = this.availableAncestries?.length > 0;\n      });\n    },\n    fetchClasses() {\n      fetch(`${this.baseUrl}/player_classes/${this.gameSystem.id}`, {\n        method: 'get'\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        this.availableClasses = res.player_classes;\n      });\n    },\n    selectAncestry(ancestryId) {\n      this.selectedAncestry = ancestryId;\n    },\n    selectClass(classId) {\n      this.selectedClass = classId;\n    },\n    selectNameGender(genderId) {\n      this.selectedNameGender = genderId;\n    },\n    selectNameStyle(styleId) {\n      this.selectedNameStyle = styleId;\n    },\n    generateCharacter() {\n      let ancestryId = this.selectedAncestry;\n      if (this.useAncestry) {\n        if (this.selectedAncestry) {\n          this.sheetAncestry = this.selectedAncestry;\n        } else {\n          const ancestryIndex = Math.floor(Math.random() * this.availableAncestries.length);\n          ancestryId = this.availableAncestries[ancestryIndex].id;\n          this.sheetAncestry = ancestryId;\n        }\n      } else {\n        ancestryId = \"none\";\n      }\n      if (this.selectedClass) {\n        this.sheetClass = this.selectedClass;\n      } else {\n        const classIndex = Math.floor(Math.random() * this.availableClasses.length);\n        this.sheetClass = this.availableClasses[classIndex].id;\n      }\n      fetchCharacterName(this.baseUrl, this.selectedNameStyle, this.selectedNameGender, this.selectAncestry).then(res => {\n        this.characterName = res;\n      });\n    }\n  },\n  created() {\n    this.fetchGameSystem().then(() => {\n      this.fetchAncestries();\n      this.fetchClasses();\n      fetchNameStyles(this.baseUrl).then(res => {\n        if (res?.length > 0) {\n          this.availableNameStyles = res;\n        } else {\n          fetchNameGenders(this.baseUrl).then(res => {\n            this.availableNameGenders = res;\n          });\n        }\n      });\n    });\n  }\n};","map":{"version":3,"names":["ref","CharacterCard","CharacterGeneratorRoller","fetchCharacterName","fetchNameGenders","fetchNameStyles","components","props","gameSystemKey","type","String","data","baseUrl","characterName","gameSystem","loading","setup","selectedAncestry","selectedClass","selectedNameGender","selectedNameStyle","sheetAncestry","sheetClass","availableAncestries","availableClasses","availableNameGenders","availableNameStyles","useAncestry","methods","fetchGameSystem","fetch","method","then","res","json","game_system","fetchAncestries","id","ancestries","length","fetchClasses","player_classes","selectAncestry","ancestryId","selectClass","classId","selectNameGender","genderId","selectNameStyle","styleId","generateCharacter","ancestryIndex","Math","floor","random","classIndex","created"],"sources":["/Users/lappy486/Code/pwf-games/src/components/CharacterGenerators/CharacterGeneratorPage.vue"],"sourcesContent":["<template>\n  <div className=\"character-generator-page\">\n    <CharacterGeneratorRoller :availableAncestries=\"availableAncestries\"\n                              :availableClasses=\"availableClasses\"\n                              :availableNameGenders=\"availableNameGenders\"\n                              :availableNameStyles=\"availableNameStyles\"\n                              :loading=\"loading\"\n                              :systemName=\"gameSystem.name\"\n                              @roll=\"generateCharacter()\"\n                              @selectAncestry=\"e => selectAncestry(e)\"\n                              @selectClass=\"e => selectClass(e)\"\n                              @selectGender=\"e => selectNameGender(e)\" />\n    <CharacterCard :availableAncestries=\"availableAncestries\"\n                   :availableClasses=\"availableClasses\"\n                   :presetCharName=\"characterName\"\n                   :selectedAncestry=\"sheetAncestry\"\n                   :selectedClass=\"sheetClass\" />\n    </div>\n</template>\n\n<script>\n/* eslint-disable */\nimport { ref } from 'vue';\n\nimport CharacterCard from \"../Cards/CharacterCard\";\nimport CharacterGeneratorRoller from \"./CharacterGeneratorRoller\";\n\nimport { fetchCharacterName, fetchNameGenders, fetchNameStyles } from './NameGenerator';\n\nexport default {\n  components: {\n    CharacterCard,\n    CharacterGeneratorRoller\n  },\n  props: {\n    gameSystemKey: {\n      type: String\n    }\n  },\n  data () {\n    return {\n      baseUrl: 'http://localhost:3000/api/v1/character_generator',\n      characterName: \"\",\n      gameSystem: {},\n      // Want to get key from params, retrieve id, name, uses ancestry\n      loading: true\n    }\n  },\n  setup () {\n    const characterName = ref(\"\");\n    const selectedAncestry = ref(\"\");\n    const selectedClass = ref(\"\");\n    const selectedNameGender = ref(\"any\");\n    const selectedNameStyle = ref(\"\");\n    const sheetAncestry = ref(\"\");\n    const sheetClass = ref(\"\");\n\n    const availableAncestries = ref([]);\n    const availableClasses = ref([]);\n    const availableNameGenders = ref([]);\n    const availableNameStyles = ref([]);\n\n    const useAncestry = ref(false);\n\n    return {\n      availableAncestries,\n      availableClasses,\n      availableNameGenders,\n      availableNameStyles,\n      characterName,\n      selectedAncestry,\n      selectedClass,\n      selectedNameGender,\n      selectedNameStyle,\n      sheetAncestry,\n      sheetClass,\n      useAncestry\n    }\n  },\n  methods: {\n    fetchGameSystem () {\n      return fetch(`${this.baseUrl}/game_system/${this.gameSystemKey}`, {\n        method: 'get'\n      }).then((res) => {\n        return res.json();\n      }).then((res) => {\n        this.gameSystem = res.game_system;\n        this.loading = false;\n      })\n    },\n    fetchAncestries () {\n      fetch(`${this.baseUrl}/ancestries/${this.gameSystem.id}`, {\n        method: 'get'\n      }).then((res) => {\n        return res.json();\n      }).then((res) => {\n        this.availableAncestries = res.ancestries;\n        this.useAncestry = this.availableAncestries?.length > 0;\n      })\n    },\n    fetchClasses () {\n      fetch(`${this.baseUrl}/player_classes/${this.gameSystem.id}`, {\n        method: 'get'\n      }).then((res) => {\n        return res.json();\n      }).then((res) => {\n        this.availableClasses = res.player_classes;\n      })\n    },\n    selectAncestry (ancestryId) {\n      this.selectedAncestry = ancestryId;\n    },\n    selectClass (classId) {\n      this.selectedClass = classId;\n    },\n    selectNameGender (genderId) {\n      this.selectedNameGender = genderId;\n    },\n    selectNameStyle (styleId) {\n      this.selectedNameStyle = styleId;\n    },\n    generateCharacter() {\n      let ancestryId = this.selectedAncestry;\n      \n      if (this.useAncestry) {\n        if (this.selectedAncestry) {\n          this.sheetAncestry = this.selectedAncestry;\n        } else {\n          const ancestryIndex = Math.floor(Math.random() * (this.availableAncestries.length))\n          ancestryId = this.availableAncestries[ancestryIndex].id\n          this.sheetAncestry = ancestryId;\n        }\n      } else {\n        ancestryId = \"none\";\n      }\n\n      if (this.selectedClass) {\n        this.sheetClass = this.selectedClass;\n      } else {\n        const classIndex = Math.floor(Math.random() * (this.availableClasses.length))\n        this.sheetClass = this.availableClasses[classIndex].id;\n      }\n\n      fetchCharacterName(this.baseUrl, this.selectedNameStyle, this.selectedNameGender, this.selectAncestry)\n        .then(res => {\n          this.characterName = res;\n        });\n    },\n    \n  },\n  created () {\n    this.fetchGameSystem().then(() => {\n      this.fetchAncestries();\n      this.fetchClasses();\n      fetchNameStyles(this.baseUrl).then(res => {\n        if (res?.length > 0) {\n          this.availableNameStyles = res;\n        } else {\n          fetchNameGenders(this.baseUrl).then(res => {\n            this.availableNameGenders = res;\n          });\n        }\n      });\n    });\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"./CharacterGeneratorPage.scss\";\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}