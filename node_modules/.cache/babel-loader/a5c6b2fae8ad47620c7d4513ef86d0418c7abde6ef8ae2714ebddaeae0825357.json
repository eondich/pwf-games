{"ast":null,"code":"/* eslint-disable */\nimport { ref } from 'vue';\nimport CharacterCard from \"../Cards/CharacterCard\";\nimport CharacterGeneratorRoller from \"./CharacterGeneratorRoller\";\nimport { fetchCharacterNameWithGender, fetchCharacterNameWithStyle, fetchNameGenders, fetchNameStyles } from './NameGenerator';\nexport default {\n  components: {\n    CharacterCard,\n    CharacterGeneratorRoller\n  },\n  props: {\n    gameSystemKey: {\n      type: String\n    }\n  },\n  data() {\n    return {\n      baseUrl: 'http://localhost:3000/api/v1/character_generator',\n      characterName: \"\",\n      gameSystem: {},\n      // Want to get key from params, retrieve id, name, uses ancestry\n      loading: true\n    };\n  },\n  setup() {\n    const characterName = ref(\"\");\n    const selectedAncestry = ref(\"\");\n    const selectedLineage = ref(\"\");\n    const selectedAppearance = ref(\"\");\n    const selectedBackground = ref(\"\");\n    const selectedClass = ref(\"\");\n    const selectedSubclass = ref(\"\");\n    const selectedNameGender = ref(\"any\");\n    const selectedNameStyle = ref(\"\");\n    const sheetAncestry = ref(\"\");\n    const sheetLineage = ref(\"\");\n    const sheetAppearance = ref(\"\");\n    const sheetBackground = ref(\"\");\n    const sheetClass = ref(\"\");\n    const sheetSubclass = ref(\"\");\n    const availableAncestries = ref([]);\n    const availableBackgrounds = ref([]);\n    const availableLineages = ref([]);\n    const sheetAvailableLineages = ref([]);\n    const availableClasses = ref([]);\n    const availableNameGenders = ref([]);\n    const availableNameStyles = ref([]);\n    const availableSubclasses = ref([]);\n    const sheetAvailableSubclasses = ref([]);\n    const useAncestry = ref(false);\n    return {\n      availableAncestries,\n      availableLineages,\n      availableBackgrounds,\n      availableClasses,\n      availableNameGenders,\n      availableNameStyles,\n      availableSubclasses,\n      characterName,\n      selectedAncestry,\n      selectedLineage,\n      selectedBackground,\n      selectedClass,\n      selectedSubclass,\n      selectedNameGender,\n      selectedNameStyle,\n      sheetAncestry,\n      sheetLineage,\n      sheetBackground,\n      sheetAvailableLineages,\n      sheetClass,\n      sheetSubclass,\n      sheetAvailableSubclasses,\n      useAncestry\n    };\n  },\n  methods: {\n    fetchGameSystem() {\n      return fetch(`${this.baseUrl}/game_system/${this.gameSystemKey}`, {\n        method: 'get'\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        this.gameSystem = res.game_system;\n        this.loading = false;\n      });\n    },\n    fetchBasePageData() {\n      fetch(`${this.baseUrl}/base_data/${this.gameSystem.id}`, {\n        method: 'get'\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        this.availableAncestries = res.ancestries;\n        this.useAncestry = this.availableAncestries?.length > 0;\n        this.availableClasses = res.player_classes;\n        this.availableNameGenders = res.gender_options;\n        this.availableNameStyles = res.name_styles;\n        this.availableBackgrounds = res.backgrounds;\n      });\n    },\n    // Long term I don't want to use a param for this, but am planning to seriously rework this after\n    // switching to <script setup> and doing some context API work so it'll do to get things running\n    fetchLineages(forSheet) {\n      const activeLineage = this.selectedAncestry || this.sheetAncestry;\n      return fetch(`${this.baseUrl}/lineages/${this.gameSystem.id}/${activeLineage}`, {\n        method: 'get'\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        if (forSheet) {\n          this.sheetAvailableLineages = res.lineages;\n        } else {\n          this.availableLineages = res.lineages;\n        }\n      });\n    },\n    // See fetchLineages note\n    fetchSubclasses(forSheet) {\n      const activeClass = this.selectedClass || this.sheetClass;\n      return fetch(`${this.baseUrl}/player_subclasses/${this.gameSystem.id}/${activeClass}`, {\n        method: 'get'\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        if (forSheet) {\n          this.sheetAvailableSubclasses = res.player_subclasses;\n        } else {\n          this.availableSubclasses = res.player_subclasses;\n        }\n      });\n    },\n    selectAncestry(ancestryId) {\n      this.selectedAncestry = ancestryId;\n      this.fetchLineages(false);\n    },\n    selectSheetAncestry(ancestryId) {\n      this.sheetAncestry = ancestryId;\n      this.sheetLineage = null;\n      this.fetchLineages(true);\n    },\n    selectLineage(lineageId) {\n      this.selectedLineage = lineageId;\n    },\n    selectBackground(backgroundId) {\n      this.selectedBackground = backgroundId;\n    },\n    selectSheetBackground(backgroundId) {\n      this.sheetBackground = backgroundId;\n    },\n    selectClass(classId) {\n      this.selectedClass = classId;\n      this.selectedSubclass = null;\n      this.fetchSubclasses(false);\n    },\n    selectSheetClass(classId) {\n      this.sheetClass = classId;\n      this.sheetSubclass = null;\n      this.fetchSubclasses(true);\n    },\n    selectSubclass(subclassId) {\n      this.selectedSubclass = subclassId;\n    },\n    selectNameGender(genderId) {\n      this.selectedNameGender = genderId;\n    },\n    selectNameStyle(styleId) {\n      this.selectedNameStyle = styleId;\n    },\n    generateLineage() {\n      if (this.selectedLineage) {\n        this.sheetLineage = this.selectedLineage;\n      } else if (this.sheetAvailableLineages?.length) {\n        const lineageIndex = Math.floor(Math.random() * this.sheetAvailableLineages.length);\n        this.sheetLineage = this.sheetAvailableLineages[lineageIndex].id;\n      } else {\n        this.sheetLineage = null;\n      }\n    },\n    generateSubclass() {\n      if (this.selectedSubclass) {\n        this.sheetSubclass = this.selectedSubclass;\n      } else if (this.sheetAvailableSubclasses) {\n        const subclassIndex = Math.floor(Math.random() * this.sheetAvailableSubclasses.length);\n        this.sheetSubclass = this.sheetAvailableSubclasses[subclassIndex].id;\n      } else {\n        this.sheetSubclass = null;\n      }\n    },\n    generateCharacter() {\n      if (this.useAncestry) {\n        if (this.selectedAncestry) {\n          this.sheetAncestry = this.selectedAncestry;\n          this.sheetAvailableLineages = this.availableLineages;\n          this.generateLineage();\n        } else {\n          const ancestryIndex = Math.floor(Math.random() * this.availableAncestries.length);\n          const ancestryId = this.availableAncestries[ancestryIndex].id;\n          this.sheetAncestry = ancestryId;\n          this.fetchLineages(true).then(() => {\n            this.generateLineage();\n          });\n        }\n      }\n      if (this.selectedClass) {\n        this.sheetClass = this.selectedClass;\n        this.sheetAvailableSubclasses = this.availableSubclasses;\n        this.generateSubclass();\n      } else {\n        const classIndex = Math.floor(Math.random() * this.availableClasses.length);\n        this.sheetClass = this.availableClasses[classIndex].id;\n        this.fetchSubclasses(true).then(() => {\n          this.generateSubclass();\n        });\n      }\n      if (this.selectedBackground) {\n        this.sheetBackground = this.selectedBackground;\n      } else {\n        const bgIndex = Math.floor(Math.random() * this.availableBackgrounds.length);\n        this.sheetBackground = this.availableBackgrounds[bgIndex].id;\n      }\n      const url = `${this.baseUrl}/character_name/${this.gameSystem.id}`;\n      if (this.availableNameStyles.length) {\n        fetchCharacterNameWithStyle(url, this.selectedNameStyle, this.selectAncestry).then(res => {\n          this.characterName = res;\n        });\n      } else {\n        fetchCharacterNameWithGender(url, this.selectedNameGender, this.selectAncestry).then(res => {\n          this.characterName = res;\n        });\n      }\n    }\n  },\n  created() {\n    this.fetchGameSystem().then(() => {\n      this.fetchBasePageData();\n    });\n  }\n};","map":{"version":3,"names":["ref","CharacterCard","CharacterGeneratorRoller","fetchCharacterNameWithGender","fetchCharacterNameWithStyle","fetchNameGenders","fetchNameStyles","components","props","gameSystemKey","type","String","data","baseUrl","characterName","gameSystem","loading","setup","selectedAncestry","selectedLineage","selectedAppearance","selectedBackground","selectedClass","selectedSubclass","selectedNameGender","selectedNameStyle","sheetAncestry","sheetLineage","sheetAppearance","sheetBackground","sheetClass","sheetSubclass","availableAncestries","availableBackgrounds","availableLineages","sheetAvailableLineages","availableClasses","availableNameGenders","availableNameStyles","availableSubclasses","sheetAvailableSubclasses","useAncestry","methods","fetchGameSystem","fetch","method","then","res","json","game_system","fetchBasePageData","id","ancestries","length","player_classes","gender_options","name_styles","backgrounds","fetchLineages","forSheet","activeLineage","lineages","fetchSubclasses","activeClass","player_subclasses","selectAncestry","ancestryId","selectSheetAncestry","selectLineage","lineageId","selectBackground","backgroundId","selectSheetBackground","selectClass","classId","selectSheetClass","selectSubclass","subclassId","selectNameGender","genderId","selectNameStyle","styleId","generateLineage","lineageIndex","Math","floor","random","generateSubclass","subclassIndex","generateCharacter","ancestryIndex","classIndex","bgIndex","url","created"],"sources":["/Users/lappy486/Code/pwf-games/src/components/CharacterGenerators/CharacterGeneratorPage.vue"],"sourcesContent":["<template>\n  <div className=\"character-generator-page\">\n    <CharacterGeneratorRoller :availableAncestries=\"availableAncestries\"\n                              :availableLineages=\"availableLineages\"\n                              :availableBackgrounds=\"availableBackgrounds\"\n                              :availableClasses=\"availableClasses\"\n                              :availableSubclasses=\"selectedClass ? availableSubclasses : []\"\n                              :availableNameGenders=\"availableNameGenders || []\"\n                              :availableNameStyles=\"availableNameStyles || []\"\n                              :loading=\"loading\"\n                              :systemName=\"gameSystem.name\"\n                              @roll=\"generateCharacter()\"\n                              @selectAncestry=\"e => selectAncestry(e)\"\n                              @selectLineage=\"e => selectLineage(e)\"\n                              @selectBackground=\"e => selectBackground(e)\"\n                              @selectClass=\"e => selectClass(e)\"\n                              @selectGender=\"e => selectNameGender(e)\" \n                              @selectStyle=\"e => selectNameStyle(e)\"\n                              @selectSubclass=\"e => selectSubclass(e)\" />\n    <CharacterCard :availableAncestries=\"availableAncestries\"\n                   :availableLineages=\"sheetAvailableLineages\"\n                   :availableBackgrounds=\"availableBackgrounds\"\n                   :availableClasses=\"availableClasses\"\n                   :availableSubclasses=\"sheetAvailableSubclasses\"\n                   :presetCharName=\"characterName\"\n                   :selectedAncestry=\"sheetAncestry\"\n                   :selectedLineage=\"sheetLineage\"\n                   :selectedBackground=\"sheetBackground\"\n                   :selectedClass=\"sheetClass\"\n                   :selectedSubclass=\"sheetSubclass\"\n                   @selectAncestry=\"e => selectSheetAncestry(e)\"\n                   @selectClass=\"e => selectSheetClass(e)\"\n                   @selectBackground=\"e => selectSheetBackground(e)\" />\n    </div>\n</template>\n\n<script>\n/* eslint-disable */\nimport { ref } from 'vue';\n\nimport CharacterCard from \"../Cards/CharacterCard\";\nimport CharacterGeneratorRoller from \"./CharacterGeneratorRoller\";\n\nimport { fetchCharacterNameWithGender, fetchCharacterNameWithStyle, fetchNameGenders, fetchNameStyles } from './NameGenerator';\n\nexport default {\n  components: {\n    CharacterCard,\n    CharacterGeneratorRoller\n  },\n  props: {\n    gameSystemKey: {\n      type: String\n    }\n  },\n  data () {\n    return {\n      baseUrl: 'http://localhost:3000/api/v1/character_generator',\n      characterName: \"\",\n      gameSystem: {},\n      // Want to get key from params, retrieve id, name, uses ancestry\n      loading: true\n    }\n  },\n  setup () {\n    const characterName = ref(\"\");\n    const selectedAncestry = ref(\"\");\n    const selectedLineage = ref(\"\");\n    const selectedAppearance = ref(\"\");\n    const selectedBackground = ref(\"\");\n    const selectedClass = ref(\"\");\n    const selectedSubclass = ref(\"\");\n    const selectedNameGender = ref(\"any\");\n    const selectedNameStyle = ref(\"\");\n  \n    const sheetAncestry = ref(\"\");\n    const sheetLineage = ref(\"\");\n    const sheetAppearance = ref(\"\");\n    const sheetBackground = ref(\"\");\n    const sheetClass = ref(\"\");\n    const sheetSubclass = ref(\"\");\n\n    const availableAncestries = ref([]);\n    const availableBackgrounds = ref([]);\n    const availableLineages = ref([]);\n    const sheetAvailableLineages = ref([]);\n    const availableClasses = ref([]);\n    const availableNameGenders = ref([]);\n    const availableNameStyles = ref([]);\n    const availableSubclasses = ref([]);\n    const sheetAvailableSubclasses = ref([]);\n\n    const useAncestry = ref(false);\n\n    return {\n      availableAncestries,\n      availableLineages,\n      availableBackgrounds,\n      availableClasses,\n      availableNameGenders,\n      availableNameStyles,\n      availableSubclasses,\n      characterName,\n      selectedAncestry,\n      selectedLineage,\n      selectedBackground,\n      selectedClass,\n      selectedSubclass,\n      selectedNameGender,\n      selectedNameStyle,\n      sheetAncestry,\n      sheetLineage,\n      sheetBackground,\n      sheetAvailableLineages,\n      sheetClass,\n      sheetSubclass,\n      sheetAvailableSubclasses,\n      useAncestry\n    }\n  },\n  methods: {\n    fetchGameSystem () {\n      return fetch(`${this.baseUrl}/game_system/${this.gameSystemKey}`, {\n        method: 'get'\n      }).then((res) => {\n        return res.json();\n      }).then((res) => {\n        this.gameSystem = res.game_system;\n        this.loading = false;\n      });\n    },\n    fetchBasePageData () {\n      fetch(`${this.baseUrl}/base_data/${this.gameSystem.id}`, {\n        method: 'get'\n      }).then((res) => {\n        return res.json();\n      }).then((res) => {\n        this.availableAncestries = res.ancestries;\n        this.useAncestry = this.availableAncestries?.length > 0;\n        this.availableClasses = res.player_classes;\n        this.availableNameGenders = res.gender_options;\n        this.availableNameStyles = res.name_styles;\n        this.availableBackgrounds = res.backgrounds;\n      });\n    },\n    // Long term I don't want to use a param for this, but am planning to seriously rework this after\n    // switching to <script setup> and doing some context API work so it'll do to get things running\n    fetchLineages (forSheet) {\n      const activeLineage = this.selectedAncestry || this.sheetAncestry;\n      return fetch(`${this.baseUrl}/lineages/${this.gameSystem.id}/${activeLineage}`, {\n        method: 'get'\n      }).then((res) => {\n        return res.json();\n      }).then((res) => {\n        if (forSheet) {\n          this.sheetAvailableLineages = res.lineages;\n        } else {\n          this.availableLineages = res.lineages;\n        }\n      }); \n    },\n    // See fetchLineages note\n    fetchSubclasses (forSheet) {\n      const activeClass = this.selectedClass || this.sheetClass;\n      return fetch(`${this.baseUrl}/player_subclasses/${this.gameSystem.id}/${activeClass}`, {\n        method: 'get'\n      }).then((res) => {\n        return res.json();\n      }).then((res) => {\n        if (forSheet) {\n          this.sheetAvailableSubclasses = res.player_subclasses;\n        } else {\n          this.availableSubclasses = res.player_subclasses;\n        }\n      });\n    },\n    selectAncestry (ancestryId) {\n      this.selectedAncestry = ancestryId;\n      this.fetchLineages(false);\n    },\n    selectSheetAncestry (ancestryId) {\n      this.sheetAncestry = ancestryId;\n      this.sheetLineage = null;\n      this.fetchLineages(true);\n    },\n    selectLineage (lineageId) {\n      this.selectedLineage = lineageId;\n    },\n    selectBackground (backgroundId) {\n      this.selectedBackground = backgroundId;\n    },\n    selectSheetBackground (backgroundId) {\n      this.sheetBackground = backgroundId;\n    },\n    selectClass (classId) {\n      this.selectedClass = classId;\n      this.selectedSubclass = null;\n      this.fetchSubclasses(false);\n    },\n    selectSheetClass (classId) {\n      this.sheetClass = classId;\n      this.sheetSubclass = null;\n      this.fetchSubclasses(true);\n    },\n    selectSubclass (subclassId) {\n      this.selectedSubclass = subclassId;\n    },\n    selectNameGender (genderId) {\n      this.selectedNameGender = genderId;\n    },\n    selectNameStyle (styleId) {\n      this.selectedNameStyle = styleId;\n    },\n    generateLineage () {\n      if (this.selectedLineage) {\n        this.sheetLineage = this.selectedLineage;\n      } else if (this.sheetAvailableLineages?.length) {\n        const lineageIndex = Math.floor(Math.random() * this.sheetAvailableLineages.length);\n        this.sheetLineage = this.sheetAvailableLineages[lineageIndex].id;\n      } else {\n        this.sheetLineage = null;\n      }\n    },\n    generateSubclass () {\n      if (this.selectedSubclass) {\n        this.sheetSubclass = this.selectedSubclass;\n      } else if (this.sheetAvailableSubclasses) {\n        const subclassIndex = Math.floor(Math.random() * (this.sheetAvailableSubclasses.length));\n        this.sheetSubclass = this.sheetAvailableSubclasses[subclassIndex].id;\n      } else {\n        this.sheetSubclass = null;\n      }\n    },\n    generateCharacter() {\n      if (this.useAncestry) {\n        if (this.selectedAncestry) {\n          this.sheetAncestry = this.selectedAncestry;\n          this.sheetAvailableLineages = this.availableLineages;\n          this.generateLineage();\n        } else {\n          const ancestryIndex = Math.floor(Math.random() * this.availableAncestries.length);\n          const ancestryId = this.availableAncestries[ancestryIndex].id\n          this.sheetAncestry = ancestryId;\n          this.fetchLineages(true).then(() => {\n            this.generateLineage();\n          });\n        }\n      }\n      \n      if (this.selectedClass) {\n        this.sheetClass = this.selectedClass;\n        this.sheetAvailableSubclasses = this.availableSubclasses;\n        this.generateSubclass();\n      } else {\n        const classIndex = Math.floor(Math.random() * (this.availableClasses.length));\n        this.sheetClass = this.availableClasses[classIndex].id;\n        \n        this.fetchSubclasses(true).then(() => {\n          this.generateSubclass();\n        });\n      }\n\n      if (this.selectedBackground) {\n        this.sheetBackground = this.selectedBackground;\n      } else {\n        const bgIndex = Math.floor(Math.random() * (this.availableBackgrounds.length));\n        this.sheetBackground = this.availableBackgrounds[bgIndex].id;\n      }\n\n      const url = `${this.baseUrl}/character_name/${this.gameSystem.id}`;\n\n      if (this.availableNameStyles.length) {\n        fetchCharacterNameWithStyle(url, this.selectedNameStyle, this.selectAncestry)\n          .then(res => {\n            this.characterName = res;\n          });\n      } else {\n        fetchCharacterNameWithGender(url, this.selectedNameGender, this.selectAncestry)\n          .then(res => {\n            this.characterName = res;\n          });\n      }\n    },\n    \n  },\n  created () {\n    this.fetchGameSystem().then(() => {\n      this.fetchBasePageData();\n    });\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"./CharacterGeneratorPage.scss\";\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}