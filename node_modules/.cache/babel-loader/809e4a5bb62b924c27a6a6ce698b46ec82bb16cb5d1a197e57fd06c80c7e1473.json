{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3e0b8eef\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  className: \"character-generator-page\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, \"Here!!\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_CharacterCard = _resolveComponent(\"CharacterCard\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_CharacterCard, {\n    availableAncestries: $setup.availableAncestries,\n    availableLineages: $setup.sheetAvailableLineages,\n    availableAppearances: $setup.availableAppearances,\n    availableBackgrounds: $setup.availableBackgrounds,\n    availableClasses: $setup.availableClasses,\n    availableSubclasses: $setup.sheetAvailableSubclasses,\n    presetCharName: $setup.characterName,\n    selectedAncestry: $setup.sheetAncestry,\n    selectedLineage: $setup.sheetLineage,\n    selectedAppearance: $setup.sheetAppearance,\n    selectedBackground: $setup.sheetBackground,\n    selectedClass: $setup.sheetClass,\n    selectedSubclass: $setup.sheetSubclass,\n    onSelectAncestry: _cache[0] || (_cache[0] = e => $options.selectSheetAncestry(e)),\n    onSelectClass: _cache[1] || (_cache[1] = e => $options.selectSheetClass(e)),\n    onSelectBackground: _cache[2] || (_cache[2] = e => $options.selectSheetBackground(e))\n  }, null, 8 /* PROPS */, [\"availableAncestries\", \"availableLineages\", \"availableAppearances\", \"availableBackgrounds\", \"availableClasses\", \"availableSubclasses\", \"presetCharName\", \"selectedAncestry\", \"selectedLineage\", \"selectedAppearance\", \"selectedBackground\", \"selectedClass\", \"selectedSubclass\"]), _hoisted_2]);\n}","map":{"version":3,"names":["className","_createElementVNode","_createElementBlock","_hoisted_1","_createVNode","_component_CharacterCard","availableAncestries","$setup","availableLineages","sheetAvailableLineages","availableAppearances","availableBackgrounds","availableClasses","availableSubclasses","sheetAvailableSubclasses","presetCharName","characterName","selectedAncestry","sheetAncestry","selectedLineage","sheetLineage","selectedAppearance","sheetAppearance","selectedBackground","sheetBackground","selectedClass","sheetClass","selectedSubclass","sheetSubclass","onSelectAncestry","_cache","e","$options","selectSheetAncestry","onSelectClass","selectSheetClass","onSelectBackground","selectSheetBackground","_hoisted_2"],"sources":["/Users/lappy486/Code/pwf-games/src/components/CharacterGenerators/CharacterGeneratorPage.vue"],"sourcesContent":["<template>\n  <div className=\"character-generator-page\">\n    <CharacterCard :availableAncestries=\"availableAncestries\"\n                   :availableLineages=\"sheetAvailableLineages\"\n                   :availableAppearances=\"availableAppearances\"\n                   :availableBackgrounds=\"availableBackgrounds\"\n                   :availableClasses=\"availableClasses\"\n                   :availableSubclasses=\"sheetAvailableSubclasses\"\n                   :presetCharName=\"characterName\"\n                   :selectedAncestry=\"sheetAncestry\"\n                   :selectedLineage=\"sheetLineage\"\n                   :selectedAppearance=\"sheetAppearance\"\n                   :selectedBackground=\"sheetBackground\"\n                   :selectedClass=\"sheetClass\"\n                   :selectedSubclass=\"sheetSubclass\"\n                   @selectAncestry=\"e => selectSheetAncestry(e)\"\n                   @selectClass=\"e => selectSheetClass(e)\"\n                   @selectBackground=\"e => selectSheetBackground(e)\" />\n  <div>Here!!</div>\n    </div>\n</template>\n\n<script>\n/* eslint-disable */\nimport { ref } from 'vue';\n\nimport CharacterCard from \"../Cards/CharacterCard\";\nimport CharacterGeneratorRoller from \"./CharacterGeneratorRoller\";\n\nimport { fetchCharacterNameWithGender, fetchCharacterNameWithStyle } from './NameGenerator';\n\nexport default {\n  components: {\n    CharacterCard,\n    CharacterGeneratorRoller\n  },\n  props: {\n    gameSystemKey: {\n      type: String\n    }\n  },\n  data () {\n    return {\n      baseUrl: 'http://localhost:3000/api/v1/character_generator',\n      characterName: \"\",\n      gameSystem: {},\n      // Want to get key from params, retrieve id, name, uses ancestry\n      loading: true\n    }\n  },\n  setup () {\n    const characterName = ref(\"\");\n    const selectedAncestry = ref(\"\");\n    const selectedLineage = ref(\"\");\n    const selectedAppearance = ref(\"\");\n    const selectedBackground = ref(\"\");\n    const selectedClass = ref(\"\");\n    const selectedSubclass = ref(\"\");\n    const selectedNameGender = ref(\"any\");\n    const selectedNameStyle = ref(\"\");\n  \n    const sheetAncestry = ref(\"\");\n    const sheetLineage = ref(\"\");\n    const sheetAppearance = ref(\"\");\n    const sheetBackground = ref(\"\");\n    const sheetClass = ref(\"\");\n    const sheetSubclass = ref(\"\");\n\n    const availableAncestries = ref([]);\n    const availableLineages = ref([]);\n    const availableAppearances = ref([]);\n    const availableBackgrounds = ref([]);\n    const sheetAvailableLineages = ref([]);\n    const availableClasses = ref([]);\n    const availableNameGenders = ref([]);\n    const availableNameStyles = ref([]);\n    const availableSubclasses = ref([]);\n    const sheetAvailableSubclasses = ref([]);\n\n    const useAncestry = ref(false);\n\n    return {\n      availableAncestries,\n      availableLineages,\n      availableAppearances,\n      availableBackgrounds,\n      availableClasses,\n      availableNameGenders,\n      availableNameStyles,\n      availableSubclasses,\n      characterName,\n      selectedAncestry,\n      selectedLineage,\n      selectedAppearance,\n      selectedBackground,\n      selectedClass,\n      selectedSubclass,\n      selectedNameGender,\n      selectedNameStyle,\n      sheetAncestry,\n      sheetLineage,\n      sheetAppearance,\n      sheetBackground,\n      sheetAvailableLineages,\n      sheetClass,\n      sheetSubclass,\n      sheetAvailableSubclasses,\n      useAncestry\n    }\n  },\n  methods: {\n    fetchGameSystem () {\n      return fetch(`${this.baseUrl}/game_system/${this.gameSystemKey}`, {\n        method: 'get'\n      }).then((res) => {\n        return res.json();\n      }).then((res) => {\n        this.gameSystem = res.game_system;\n        this.loading = false;\n      });\n    },\n    fetchBasePageData () {\n      fetch(`${this.baseUrl}/base_data/${this.gameSystem.id}`, {\n        method: 'get'\n      }).then((res) => {\n        return res.json();\n      }).then((res) => {\n        this.availableAncestries = res.ancestries;\n        this.useAncestry = this.availableAncestries?.length > 0;\n        this.availableClasses = res.player_classes;\n        this.availableNameGenders = res.gender_options;\n        this.availableNameStyles = res.name_styles;\n        this.availableBackgrounds = res.backgrounds;\n        this.availableAppearances = res.appearances;\n      });\n    },\n    // Long term I don't want to use a param for this, but am planning to seriously rework this after\n    // switching to <script setup> and doing some context API work so it'll do to get things running\n    fetchLineages (forSheet) {\n      const activeLineage = this.selectedAncestry || this.sheetAncestry;\n      return fetch(`${this.baseUrl}/lineages/${this.gameSystem.id}/${activeLineage}`, {\n        method: 'get'\n      }).then((res) => {\n        return res.json();\n      }).then((res) => {\n        if (forSheet) {\n          this.sheetAvailableLineages = res.lineages;\n        } else {\n          this.availableLineages = res.lineages;\n        }\n      });\n    },\n    // See fetchLineages note\n    fetchSubclasses (forSheet) {\n      const activeClass = this.selectedClass || this.sheetClass;\n      return fetch(`${this.baseUrl}/player_subclasses/${this.gameSystem.id}/${activeClass}`, {\n        method: 'get'\n      }).then((res) => {\n        return res.json();\n      }).then((res) => {\n        if (forSheet) {\n          this.sheetAvailableSubclasses = res.player_subclasses;\n        } else {\n          this.availableSubclasses = res.player_subclasses;\n        }\n      });\n    },\n    selectAncestry (ancestryId) {\n      this.selectedAncestry = ancestryId;\n      this.fetchLineages(false);\n    },\n    selectSheetAncestry (ancestryId) {\n      this.sheetAncestry = ancestryId;\n      this.sheetLineage = null;\n      this.fetchLineages(true);\n    },\n    selectAppearance (appearanceId) {\n      this.selectedAppearance = appearanceId\n    },\n    selectSheetAppearance (appearanceId) {\n      this.sheetAppearance = appearanceId\n    },\n    selectLineage (lineageId) {\n      this.selectedLineage = lineageId;\n    },\n    selectBackground (backgroundId) {\n      this.selectedBackground = backgroundId;\n    },\n    selectSheetBackground (backgroundId) {\n      this.sheetBackground = backgroundId;\n    },\n    selectClass (classId) {\n      this.selectedClass = classId;\n      this.selectedSubclass = null;\n      this.fetchSubclasses(false);\n    },\n    selectSheetClass (classId) {\n      this.sheetClass = classId;\n      this.sheetSubclass = null;\n      this.fetchSubclasses(true);\n    },\n    selectSubclass (subclassId) {\n      this.selectedSubclass = subclassId;\n    },\n    selectNameGender (genderId) {\n      this.selectedNameGender = genderId;\n    },\n    selectNameStyle (styleId) {\n      this.selectedNameStyle = styleId;\n    },\n    generateLineage () {\n      if (this.selectedLineage) {\n        this.sheetLineage = this.selectedLineage;\n      } else if (this.sheetAvailableLineages?.length) {\n        const lineageIndex = Math.floor(Math.random() * this.sheetAvailableLineages.length);\n        this.sheetLineage = this.sheetAvailableLineages[lineageIndex].id;\n      } else {\n        this.sheetLineage = null;\n      }\n    },\n    generateSubclass () {\n      if (this.selectedSubclass) {\n        this.sheetSubclass = this.selectedSubclass;\n      } else if (this.sheetAvailableSubclasses) {\n        const subclassIndex = Math.floor(Math.random() * (this.sheetAvailableSubclasses.length));\n        this.sheetSubclass = this.sheetAvailableSubclasses[subclassIndex].id;\n      } else {\n        this.sheetSubclass = null;\n      }\n    },\n    generateCharacter() {\n      if (this.useAncestry) {\n        if (this.selectedAncestry) {\n          this.sheetAncestry = this.selectedAncestry;\n          this.sheetAvailableLineages = this.availableLineages;\n          this.generateLineage();\n        } else {\n          const ancestryIndex = Math.floor(Math.random() * this.availableAncestries.length);\n          const ancestryId = this.availableAncestries[ancestryIndex].id\n          this.sheetAncestry = ancestryId;\n          this.fetchLineages(true).then(() => {\n            this.generateLineage();\n          });\n        }\n      }\n      \n      if (this.selectedClass) {\n        this.sheetClass = this.selectedClass;\n        this.sheetAvailableSubclasses = this.availableSubclasses;\n        this.generateSubclass();\n      } else {\n        const classIndex = Math.floor(Math.random() * (this.availableClasses.length));\n        this.sheetClass = this.availableClasses[classIndex].id;\n        \n        this.fetchSubclasses(true).then(() => {\n          this.generateSubclass();\n        });\n      }\n\n      if (this.selectedBackground) {\n        this.sheetBackground = this.selectedBackground;\n      } else {\n        const bgIndex = Math.floor(Math.random() * (this.availableBackgrounds.length));\n        this.sheetBackground = this.availableBackgrounds[bgIndex].id;\n      }\n\n      const url = `${this.baseUrl}/character_name/${this.gameSystem.id}`;\n\n      if (this.availableNameStyles.length) {\n        fetchCharacterNameWithStyle(url, this.selectedNameStyle, this.selectAncestry)\n          .then(res => {\n            this.characterName = res;\n          });\n      } else {\n        fetchCharacterNameWithGender(url, this.selectedNameGender, this.selectAncestry)\n          .then(res => {\n            this.characterName = res;\n          });\n      }\n\n      if (this.selectedAppearance) {\n        this.sheetAppearance = this.selectedAppearance;\n      } else {\n        const appearanceIndex = Math.floor(Math.random() * (this.availableAppearances.length));\n        this.sheetAppearance = this.availableAppearances[appearanceIndex].id;\n      }\n    },\n  },\n  created () {\n    this.fetchGameSystem().then(() => {\n      this.fetchBasePageData();\n    });\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"./CharacterGeneratorPage.scss\";\n</style>"],"mappings":";;;EACOA,SAAS,EAAC;AAA0B;gEAiBzCC,mBAAA,CAAiB,aAAZ,QAAM;;;;uBAjBXC,mBAAA,CAkBQ,OAlBRC,UAkBQ,GAjBNC,YAAA,CAemEC,wBAAA;IAfnDC,mBAAmB,EAAEC,MAAA,CAAAD,mBAAmB;IACxCE,iBAAiB,EAAED,MAAA,CAAAE,sBAAsB;IACzCC,oBAAoB,EAAEH,MAAA,CAAAG,oBAAoB;IAC1CC,oBAAoB,EAAEJ,MAAA,CAAAI,oBAAoB;IAC1CC,gBAAgB,EAAEL,MAAA,CAAAK,gBAAgB;IAClCC,mBAAmB,EAAEN,MAAA,CAAAO,wBAAwB;IAC7CC,cAAc,EAAER,MAAA,CAAAS,aAAa;IAC7BC,gBAAgB,EAAEV,MAAA,CAAAW,aAAa;IAC/BC,eAAe,EAAEZ,MAAA,CAAAa,YAAY;IAC7BC,kBAAkB,EAAEd,MAAA,CAAAe,eAAe;IACnCC,kBAAkB,EAAEhB,MAAA,CAAAiB,eAAe;IACnCC,aAAa,EAAElB,MAAA,CAAAmB,UAAU;IACzBC,gBAAgB,EAAEpB,MAAA,CAAAqB,aAAa;IAC/BC,gBAAc,EAAAC,MAAA,QAAAA,MAAA,MAAEC,CAAC,IAAIC,QAAA,CAAAC,mBAAmB,CAACF,CAAC;IAC1CG,aAAW,EAAAJ,MAAA,QAAAA,MAAA,MAAEC,CAAC,IAAIC,QAAA,CAAAG,gBAAgB,CAACJ,CAAC;IACpCK,kBAAgB,EAAAN,MAAA,QAAAA,MAAA,MAAEC,CAAC,IAAIC,QAAA,CAAAK,qBAAqB,CAACN,CAAC;8SAChEO,UAAiB,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}