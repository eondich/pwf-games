{"ast":null,"code":"import { createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode($setup[\"CharacterGeneratorRollerNew\"], {\n    gameSystemName: $setup.gameSystem.value?.name,\n    loading: $setup.loading,\n    dropdownOptions: $setup.dropdownOptions,\n    onRollCharacter: _cache[0] || (_cache[0] = $event => $setup.rollNewCharacter()),\n    onSetNameStyle: _cache[1] || (_cache[1] = e => $setup.generatorSelectedOptions.nameStyle = e)\n  }, null, 8 /* PROPS */, [\"gameSystemName\", \"loading\", \"dropdownOptions\"]), _createVNode($setup[\"CharacterCardNew\"], {\n    dropdownOptions: $setup.dropdownOptions,\n    generatorSelectedOptions: $setup.generatorSelectedOptions,\n    selectedOptions: $setup.cardSelectedOptions,\n    loading: $setup.loading\n  }, null, 8 /* PROPS */, [\"dropdownOptions\", \"generatorSelectedOptions\", \"selectedOptions\", \"loading\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createVNode","$setup","gameSystemName","gameSystem","value","name","loading","dropdownOptions","onRollCharacter","_cache","$event","rollNewCharacter","onSetNameStyle","e","generatorSelectedOptions","nameStyle","selectedOptions","cardSelectedOptions"],"sources":["/Users/lappy486/Code/pwf-games/src/components/CharacterGenerators/CharacterGeneratorNew.vue"],"sourcesContent":["<template>\n  <CharacterGeneratorRollerNew :gameSystemName=\"gameSystem.value?.name\"\n                               :loading=\"loading\"\n                               :dropdownOptions=\"dropdownOptions\"\n                               @rollCharacter=\"rollNewCharacter()\"\n                               @setNameStyle=\"e => generatorSelectedOptions.nameStyle = e\" />\n  <CharacterCardNew :dropdownOptions=\"dropdownOptions\"\n                    :generatorSelectedOptions=\"generatorSelectedOptions\"\n                    :selectedOptions=\"cardSelectedOptions\"\n                    :loading=\"loading\" />\n</template>\n\n<script setup>\nimport { ref, reactive } from 'vue'\n\nimport CharacterGeneratorRollerNew from './CharacterGeneratorRollerNew.vue';\nimport CharacterCardNew from '../Cards/CharacterCardNew.vue';\n\nconst props = defineProps({\n  gameSystemKey: String\n});\n\nconst loading = ref(true);\nconst baseUrl = 'http://localhost:3000/api/v1/character_generator';\nconst gameSystem = reactive({});\nconst dropdownOptions = reactive({});\n\n// Move into api file?\nfunction fetchBaseData () {\n  fetch(`${baseUrl}/base_data/${gameSystem.value.id}`, {\n    method: 'get'\n  }).then((res) => {\n    return res.json();\n  }).then((res) => {\n    dropdownOptions.value = {\n      ancestries: res.ancestries || [],\n      characterClasses: res.player_classes || [],\n      nameGenders: res.gender_options || [],\n      nameStyles: res.name_styles || [],\n      backgrounds: res.backgrounds || [],\n      appearances: res.appearances || []\n    }\n  });\n  loading.value = false;\n}\n\nfetch(`${baseUrl}/game_system/${props.gameSystemKey}`, {\n  method: 'get'\n}).then((res) => {\n  return res.json();\n}).then((res) => {\n  gameSystem.value = res.game_system;\n  fetchBaseData();\n});\n\nconst baseOptions = {\n  ancestry: null,\n  appearance: null,\n  background: null,\n  characterClass: null\n};\nconst subOptions = {\n  lineage: null,\n  characterSubclass: null\n};\nconst generatorSpecific = {\n  nameGender: 'any',\n  nameStyle: null\n};\n\n// Generator selected data\nconst generatorSelectedOptions = reactive({\n  ...baseOptions,\n  ...subOptions,\n  ...generatorSpecific\n});\n\n// Need to be able to call for generator OR card :/\nfunction fetchLineages () {\n  fetch(`${baseUrl}/lineages/${gameSystem.value.id}/${generatorSelectedOptions.ancestry}`, {\n    method: 'get'\n  }).then((res) => {\n    return res.json();\n  }).then((res) => {\n    cardDropdownOptions.lineages = res.lineages;\n  });\n}\n\nfunction fetchCharacterSubclasses () {\n  fetch(`${baseUrl}/player_subclasses/${gameSystem.value.id}/${generatorSelectedOptions.characterClass}`, {\n    method: 'get'\n  }).then((res) => {\n    return res.json();\n  }).then((res) => {\n    cardDropdownOptions.characterSubclasses = res.player_subclasses;\n  });\n}\n\n// Card data\nconst cardSelectedOptions = reactive({\n  ...baseOptions,\n  ...subOptions\n});\n\nconst cardDropdownOptions = reactive({\n  characterSubclasses: [],\n  lineages: []\n});\n\n// Character generation\nfunction generateAncestry () {\n  const ancestryIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n  const ancestryId = dropdownOptions.value.ancestries[ancestryIndex].id;\n  return ancestryId;\n}\n\nfunction generateAppearance () {\n  const appearanceIndex = Math.floor(Math.random() * (dropdownOptions.value.appearances.length));\n  return dropdownOptions.value.appearances[appearanceIndex].id;\n}\n\nfunction generateBackground () {\n  const backgroundIndex = Math.floor(Math.random() * (dropdownOptions.value.backgrounds.length));\n  return dropdownOptions.value.backgrounds[backgroundIndex].id;\n}\n\nfunction generateCharacterClass () {\n  const characterClassIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n  return dropdownOptions.value.ancestries[characterClassIndex].id;\n}\n\nfunction generateCharacterSubclass () {\n  fetchCharacterSubclasses(generatorSelectedOptions.characterClass, (characterSubclasses) => { cardDropdownOptions.characterSubclasses = characterSubclasses });\n  const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.characterSubclasses.length);\n  return cardDropdownOptions.characterSubclasses[subclassIndex];\n}\n\nfunction generateLineage () {\n  fetchLineages(generatorSelectedOptions.ancestry, (lineages) => { cardDropdownOptions.lineages = lineages })\n  const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.lineages.length);\n  return cardDropdownOptions.lineages[lineageIndex];\n}\n\nfunction rollNewCharacter () {\n  Object.keys(baseOptions).forEach(key => {\n    if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n      cardSelectedOptions[key] = generatorSelectedOptions[key];\n    }\n    else {\n      switch (key) {\n        case 'ancestry':\n          cardSelectedOptions[key] = generateAncestry();\n          break;\n        case 'appearance':\n          cardSelectedOptions[key] = generateAppearance();\n          break;\n        case 'background':\n          cardSelectedOptions[key] = generateBackground();\n          break;\n        case 'characterClass':\n          cardSelectedOptions[key] = generateCharacterClass();\n          break;\n        default:\n          break;\n      }\n    }\n  });\n\n  Object.keys(subOptions).forEach(key => {\n    if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n      cardSelectedOptions[key] = generatorSelectedOptions[key];\n    } else {\n      switch (key) {\n        case 'lineage':\n          cardSelectedOptions[key] = generateLineage();\n          break;\n        case 'characterSubclass':\n          cardSelectedOptions[key] = generateCharacterSubclass();\n          break;\n        default:\n          break;\n      }\n    }\n  });\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"./CharacterGeneratorPage.scss\";\n</style>\n"],"mappings":";;6DACEA,YAAA,CAI2FC,MAAA;IAJ7DC,cAAc,EAAED,MAAA,CAAAE,UAAU,CAACC,KAAK,EAAEC,IAAI;IACtCC,OAAO,EAAEL,MAAA,CAAAK,OAAO;IAChBC,eAAe,EAAEN,MAAA,CAAAM,eAAe;IAChCC,eAAa,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAET,MAAA,CAAAU,gBAAgB;IAC/BC,cAAY,EAAAH,MAAA,QAAAA,MAAA,MAAEI,CAAC,IAAIZ,MAAA,CAAAa,wBAAwB,CAACC,SAAS,GAAGF,CAAC;6EACvFb,YAAA,CAGuCC,MAAA;IAHpBM,eAAe,EAAEN,MAAA,CAAAM,eAAe;IAChCO,wBAAwB,EAAEb,MAAA,CAAAa,wBAAwB;IAClDE,eAAe,EAAEf,MAAA,CAAAgB,mBAAmB;IACpCX,OAAO,EAAEL,MAAA,CAAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}