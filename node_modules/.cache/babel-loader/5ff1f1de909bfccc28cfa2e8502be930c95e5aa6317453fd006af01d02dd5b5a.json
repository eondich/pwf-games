{"ast":null,"code":"import { createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode($setup[\"CharacterGeneratorRollerNew\"], {\n    onRollCharacter: _cache[0] || (_cache[0] = $event => $setup.rollNewCharacter()),\n    loading: $setup.loading\n  }, null, 8 /* PROPS */, [\"loading\"]), _createVNode($setup[\"CharacterCardNew\"], {\n    loading: $setup.loading\n  }, null, 8 /* PROPS */, [\"loading\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createVNode","$setup","onRollCharacter","_cache","$event","rollNewCharacter","loading"],"sources":["/Users/lappy486/Code/pwf-games/src/components/CharacterGenerators/CharacterGeneratorNew.vue"],"sourcesContent":["<template>\n  <CharacterGeneratorRollerNew @rollCharacter=\"rollNewCharacter()\" :loading=\"loading\" />\n  <CharacterCardNew :loading=\"loading\" />\n</template>\n\n<script setup>\nimport { provide, ref } from 'vue'\n\nimport CharacterGeneratorRollerNew from './CharacterGeneratorRollerNew.vue';\nimport CharacterCardNew from '../Cards/CharacterCardNew.vue';\n\nconst props = defineProps({\n  gameSystemKey: String\n});\n\nconst loading = ref(true);\nconst baseUrl = 'http://localhost:3000/api/v1/character_generator';\nconst gameSystem = ref({});\nconst dropdownOptions = ref({\n  ancestries: [],\n  lineages: [],\n  appearances: [],\n  backgrounds: [],\n  characterClasses: [],\n  characterSubclasses: [],\n  nameGenders: [],\n  nameStyles: [],\n});\n\n// Move into api file?\nfunction fetchBaseData () {\n  fetch(`${baseUrl}/base_data/${gameSystem.value.id}`, {\n    method: 'get'\n  }).then((res) => {\n    return res.json();\n  }).then((res) => {\n    dropdownOptions.value.ancestries = res.ancestries;\n    dropdownOptions.value.characterClasses = res.player_classes;\n    dropdownOptions.value.nameGenders = res.gender_options;\n    dropdownOptions.value.nameStyles = res.name_styles;\n    dropdownOptions.value.backgrounds = res.backgrounds;\n    dropdownOptions.value.appearances = res.appearances;\n  });\n  loading.value = false;\n}\n\nfetch(`${baseUrl}/game_system/${props.gameSystemKey}`, {\n  method: 'get'\n}).then((res) => {\n  return res.json();\n}).then((res) => {\n  gameSystem.value = res.game_system;\n  fetchBaseData();\n});\n\nconst baseOptions = {\n  ancestry: null,\n  appearance: null,\n  background: null,\n  characterClass: null\n};\nconst subOptions = {\n  lineage: null,\n  characterSubclass: null\n};\nconst generatorSpecific = {\n  nameGender: 'any',\n  nameStyle: null\n};\n\n// Generator selected data\nconst generatorSelectedOptions = ref({\n  ...baseOptions,\n  ...subOptions,\n  ...generatorSpecific\n});\n\nfunction setGeneratorSelectedOptions (optionKey, newVal) {\n  // TODO: stronger typing\n  generatorSelectedOptions[optionKey] = newVal;\n}\n\n// Need to be able to call for generator OR card :/\nfunction fetchLineages () {\n  fetch(`${baseUrl}/lineages/${gameSystem.value.id}/${generatorSelectedOptions.value.ancestry}`, {\n    method: 'get'\n  }).then((res) => {\n    return res.json();\n  }).then((res) => {\n    cardDropdownOptions.value.lineages = res.lineages;\n  });\n}\n\nfunction fetchCharacterSubclasses () {\n  fetch(`${baseUrl}/player_subclasses/${gameSystem.value.id}/${generatorSelectedOptions.value.characterClass}`, {\n    method: 'get'\n  }).then((res) => {\n    return res.json();\n  }).then((res) => {\n    cardDropdownOptions.value.characterSubclasses = res.player_subclasses;\n  });\n}\n\nconsole.log(gameSystem)\n\nprovide('generatorData', { gameSystemName: gameSystem.value.name, dropdownOptions, fetchLineages, fetchCharacterSubclasses });\nprovide('generatorSelected', { generatorSelectedOptions, setGeneratorSelectedOptions });\n\n// Card selected data\nconst cardSelectedOptions = ref({\n  ...baseOptions,\n  ...subOptions\n});\n\nfunction setCardSelectedOptions (optionKey, newVal) {\n  // TODO: stronger typing\n  cardSelectedOptions[optionKey] = newVal;\n}\n\nconst cardDropdownOptions = ref({\n  characterSubclasses: [],\n  lineages: []\n});\n\nfunction generateAncestry () {\n  const ancestryIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n  const ancestryId = dropdownOptions.value.ancestries[ancestryIndex].id;\n  return ancestryId;\n}\n\nfunction generateAppearance () {\n  const appearanceIndex = Math.floor(Math.random() * (dropdownOptions.value.appearances.length));\n  return dropdownOptions.value.appearances[appearanceIndex].id;\n}\n\nfunction generateBackground () {\n  const backgroundIndex = Math.floor(Math.random() * (dropdownOptions.value.backgrounds.length));\n  return dropdownOptions.value.backgrounds[backgroundIndex].id;\n}\n\nfunction generateCharacterClass () {\n  const characterClassIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n  return dropdownOptions.value.ancestries[characterClassIndex].id;\n}\n\nfunction generateCharacterSubclass () {\n  fetchCharacterSubclasses(baseOptions.value.characterClass, (characterSubclasses) => { cardDropdownOptions.value.characterSubclasses = characterSubclasses });\n  const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.value.characterSubclasses.length);\n  return cardDropdownOptions.value.characterSubclasses[subclassIndex];\n}\n\nfunction generateLineage () {\n  fetchLineages(baseOptions.value.ancestry, (lineages) => { cardDropdownOptions.value.lineages = lineages })\n  const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.value.lineages.length);\n  return cardDropdownOptions.value.lineages[lineageIndex];\n}\n\nfunction rollNewCharacter () {\n  Object.keys(baseOptions.value).forEach(key => {\n    if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n      setCardSelectedOptions(key, generatorSelectedOptions[key]);\n    } else {\n      switch (key) {\n        case 'ancestry':\n          setCardSelectedOptions(key, generateAncestry());\n          break;\n        case 'appearance':\n          setCardSelectedOptions(key, generateAppearance());\n          break;\n        case 'background':\n          setCardSelectedOptions(key, generateBackground());\n          break;\n        case 'characterClass':\n          setCardSelectedOptions(key, generateCharacterClass());\n          break;\n        default:\n          break;\n      }\n    }\n  });\n\n  Object.keys(subOptions).forEach(key => {\n    if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n      setCardSelectedOptions(key, generatorSelectedOptions[key]);\n    } else {\n      switch (key) {\n        case 'lineage':\n          setCardSelectedOptions(key, generateLineage);\n          break;\n        case 'characterSubclass':\n          setCardSelectedOptions(key, generateCharacterSubclass);\n          break;\n        default:\n          break;\n      }\n    }\n  });\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"./CharacterGeneratorPage.scss\";\n</style>\n"],"mappings":";;6DACEA,YAAA,CAAsFC,MAAA;IAAxDC,eAAa,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEH,MAAA,CAAAI,gBAAgB;IAAKC,OAAO,EAAEL,MAAA,CAAAK;wCAC3EN,YAAA,CAAuCC,MAAA;IAApBK,OAAO,EAAEL,MAAA,CAAAK;EAAO,qC"},"metadata":{},"sourceType":"module","externalDependencies":[]}