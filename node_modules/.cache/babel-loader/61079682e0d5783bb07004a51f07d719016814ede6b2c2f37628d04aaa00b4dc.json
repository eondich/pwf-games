{"ast":null,"code":"import { inject } from 'vue';\nimport CharacterGeneratorRollerNew from './CharacterGeneratorRollerNew.vue';\nimport CharacterCardNew from '../Cards/CharacterCardNew.vue';\nexport default {\n  __name: 'CharacterGeneratorNew',\n  props: {\n    gameSystemKey: String\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n\n    // const baseUrl = 'http://localhost:3000/api/v1/character_generator';\n    // const gameSystem = ref({});\n    // const dropdownOptions = ref({\n    //   ancestries: [],\n    //   lineages: [],\n    //   appearances: [],\n    //   backgrounds: [],\n    //   characterClasses: [],\n    //   characterSubclasses: [],\n    //   nameGenders: [],\n    //   nameStyles: [],\n    // });\n\n    // await fetch(`${baseUrl}/game_system/${props.gameSystemKey}`, {\n    //   method: 'get'\n    // }).then((res) => {\n    //   return res.json();\n    // }).then((res) => {\n    //   gameSystem.value = res.game_system;\n    // });\n\n    // fetch(`${baseUrl}/base_data/${gameSystem.id}`, {\n    //   method: 'get'\n    // }).then((res) => {\n    //   return res.json();\n    // }).then((res) => {\n    //   dropdownOptions.value.ancestries = res.ancestries;\n    //   dropdownOptions.value.characterClasses = res.player_classes;\n    //   dropdownOptions.value.nameGenders = res.gender_options;\n    //   dropdownOptions.value.nameStyles = res.name_styles;\n    //   dropdownOptions.value.backgrounds = res.backgrounds;\n    //   dropdownOptions.value.appearances = res.appearances;\n    // });\n\n    // const baseOptions = {\n    //   ancestry: null,\n    //   appearance: null,\n    //   background: null,\n    //   characterClass: null\n    // };\n    // const subOptions = {\n    //   lineage: null,\n    //   characterSubclass: null\n    // };\n    // const generatorSpecific = {\n    //   nameGender: 'any',\n    //   nameStyle: null\n    // };\n\n    // // Generator selected data\n\n    // const generatorSelectedOptions = ref({\n    //   ...baseOptions,\n    //   ...subOptions,\n    //   ...generatorSpecific\n    // });\n\n    // function setGeneratorSelectedOptions (optionKey, newVal) {\n    //   // TODO: stronger typing\n    //   generatorSelectedOptions[optionKey] = newVal;\n    // }\n\n    // // Need to be able to call for generator OR card :/\n    // function fetchLineages () {\n    //   fetch(`${baseUrl}/lineages/${gameSystem.id}/${generatorSelectedOptions.value.ancestry}`, {\n    //     method: 'get'\n    //   }).then((res) => {\n    //     return res.json();\n    //   }).then((res) => {\n    //     cardDropdownOptions.value.lineages = res.lineages;\n    //   });\n    // }\n\n    // function fetchCharacterSubclasses () {\n    //   fetch(`${baseUrl}/player_subclasses/${gameSystem.id}/${generatorSelectedOptions.value.characterClass}`, {\n    //     method: 'get'\n    //   }).then((res) => {\n    //     return res.json();\n    //   }).then((res) => {\n    //     cardDropdownOptions.value.characterSubclasses = res.player_subclasses;\n    //   });\n    // }\n\n    // provide('generatorData', { gameSystem, dropdownOptions, fetchLineages, fetchCharacterSubclasses });\n    // provide('generatorSelected', { generatorSelectedOptions, setGeneratorSelectedOptions });\n\n    // // Card selected data\n    // const cardSelectedOptions = ref({\n    //   ...baseOptions,\n    //   ...subOptions\n    // });\n\n    // function setCardSelectedOptions (optionKey, newVal) {\n    //   // TODO: stronger typing\n    //   cardSelectedOptions[optionKey] = newVal;\n    // }\n\n    // const cardDropdownOptions = ref({\n    //   characterSubclasses: [],\n    //   lineages: []\n    // });\n\n    // function generateAncestry () {\n    //   const ancestryIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n    //   const ancestryId = dropdownOptions.value.ancestries[ancestryIndex].id;\n    //   return ancestryId;\n    // }\n\n    // function generateAppearance () {\n    //   const appearanceIndex = Math.floor(Math.random() * (dropdownOptions.value.appearances.length));\n    //   return dropdownOptions.value.appearances[appearanceIndex].id;\n    // }\n\n    // function generateBackground () {\n    //   const backgroundIndex = Math.floor(Math.random() * (dropdownOptions.value.backgrounds.length));\n    //   return dropdownOptions.value.backgrounds[backgroundIndex].id;\n    // }\n\n    // function generateCharacterClass () {\n    //   const characterClassIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n    //   return dropdownOptions.value.ancestries[characterClassIndex].id;\n    // }\n\n    // function generateCharacterSubclass () {\n    //   fetchCharacterSubclasses(characterClassId, (characterSubclasses) => { cardDropdownOptions.value.characterSubclasses = characterSubclasses });\n    //   const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.value.characterSubclasses.length);\n    //   return cardDropdownOptions.value.characterSubclasses[subclassIndex];\n    // }\n\n    // function generateLineage () {\n    //   fetchLineages(ancestryId, (lineages) => { cardDropdownOptions.value.lineages = lineages })\n    //   const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.value.lineages.length);\n    //   return cardDropdownOptions.value.lineages[lineageIndex];\n    // }\n\n    // function rollNewCharacter () {\n    //   Object.keys(baseOptions).forEach(key => {\n    //     if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n    //       setCardSelectedOptions(key, generatorSelectedOptions[key]);\n    //     } else {\n    //       switch (key) {\n    //         case ancestry:\n    //           setCardSelectedOptions(key, generateAncestry());\n    //           break;\n    //         case appearance:\n    //           setCardSelectedOptions(key, generateAppearance());\n    //           break;\n    //         case background:\n    //           setCardSelectedOptions(key, generateBackground());\n    //           break;\n    //         case characterClass:\n    //           setCardSelectedOptions(key, generateCharacterClass());\n    //           break;\n    //         default:\n    //           break;\n    //       }\n    //     }\n    //   });\n\n    //   Object.keys(subOptions).forEach(key => {\n    //     if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n    //       setCardSelectedOptions(key, generatorSelectedOptions[key]);\n    //     } else {\n    //       switch (key) {\n    //         case lineage:\n    //           setCardSelectedOptions(key, generateLineage);\n    //           break;\n    //         case characterSubclass:\n    //           setCardSelectedOptions(key, generateCharacterSubclass);\n    //           break;\n    //         default:\n    //           break;\n    //       }\n    //     }\n    //   });\n    // }\n\n    const __returned__ = {\n      props,\n      inject,\n      CharacterGeneratorRollerNew,\n      CharacterCardNew\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["inject","CharacterGeneratorRollerNew","CharacterCardNew","props","__props"],"sources":["/Users/lappy486/Code/pwf-games/src/components/CharacterGenerators/CharacterGeneratorNew.vue"],"sourcesContent":["<template>\n  <!-- <CharacterGeneratorRollerNew @rollCharacter={rollNewCharacter()} />\n  <CharacterCardNew /> -->\n  <div>Here</div>\n</template>\n\n<script setup>\nimport { inject } from 'vue'\n\nimport CharacterGeneratorRollerNew from './CharacterGeneratorRollerNew.vue';\nimport CharacterCardNew from '../Cards/CharacterCardNew.vue';\n\nconst props = defineProps({\n  gameSystemKey: String\n})\n\n// const baseUrl = 'http://localhost:3000/api/v1/character_generator';\n// const gameSystem = ref({});\n// const dropdownOptions = ref({\n//   ancestries: [],\n//   lineages: [],\n//   appearances: [],\n//   backgrounds: [],\n//   characterClasses: [],\n//   characterSubclasses: [],\n//   nameGenders: [],\n//   nameStyles: [],\n// });\n\n// await fetch(`${baseUrl}/game_system/${props.gameSystemKey}`, {\n//   method: 'get'\n// }).then((res) => {\n//   return res.json();\n// }).then((res) => {\n//   gameSystem.value = res.game_system;\n// });\n\n// fetch(`${baseUrl}/base_data/${gameSystem.id}`, {\n//   method: 'get'\n// }).then((res) => {\n//   return res.json();\n// }).then((res) => {\n//   dropdownOptions.value.ancestries = res.ancestries;\n//   dropdownOptions.value.characterClasses = res.player_classes;\n//   dropdownOptions.value.nameGenders = res.gender_options;\n//   dropdownOptions.value.nameStyles = res.name_styles;\n//   dropdownOptions.value.backgrounds = res.backgrounds;\n//   dropdownOptions.value.appearances = res.appearances;\n// });\n\n// const baseOptions = {\n//   ancestry: null,\n//   appearance: null,\n//   background: null,\n//   characterClass: null\n// };\n// const subOptions = {\n//   lineage: null,\n//   characterSubclass: null\n// };\n// const generatorSpecific = {\n//   nameGender: 'any',\n//   nameStyle: null\n// };\n\n// // Generator selected data\n\n// const generatorSelectedOptions = ref({\n//   ...baseOptions,\n//   ...subOptions,\n//   ...generatorSpecific\n// });\n\n// function setGeneratorSelectedOptions (optionKey, newVal) {\n//   // TODO: stronger typing\n//   generatorSelectedOptions[optionKey] = newVal;\n// }\n\n// // Need to be able to call for generator OR card :/\n// function fetchLineages () {\n//   fetch(`${baseUrl}/lineages/${gameSystem.id}/${generatorSelectedOptions.value.ancestry}`, {\n//     method: 'get'\n//   }).then((res) => {\n//     return res.json();\n//   }).then((res) => {\n//     cardDropdownOptions.value.lineages = res.lineages;\n//   });\n// }\n\n// function fetchCharacterSubclasses () {\n//   fetch(`${baseUrl}/player_subclasses/${gameSystem.id}/${generatorSelectedOptions.value.characterClass}`, {\n//     method: 'get'\n//   }).then((res) => {\n//     return res.json();\n//   }).then((res) => {\n//     cardDropdownOptions.value.characterSubclasses = res.player_subclasses;\n//   });\n// }\n\n// provide('generatorData', { gameSystem, dropdownOptions, fetchLineages, fetchCharacterSubclasses });\n// provide('generatorSelected', { generatorSelectedOptions, setGeneratorSelectedOptions });\n\n// // Card selected data\n// const cardSelectedOptions = ref({\n//   ...baseOptions,\n//   ...subOptions\n// });\n\n// function setCardSelectedOptions (optionKey, newVal) {\n//   // TODO: stronger typing\n//   cardSelectedOptions[optionKey] = newVal;\n// }\n\n// const cardDropdownOptions = ref({\n//   characterSubclasses: [],\n//   lineages: []\n// });\n\n// function generateAncestry () {\n//   const ancestryIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n//   const ancestryId = dropdownOptions.value.ancestries[ancestryIndex].id;\n//   return ancestryId;\n// }\n\n// function generateAppearance () {\n//   const appearanceIndex = Math.floor(Math.random() * (dropdownOptions.value.appearances.length));\n//   return dropdownOptions.value.appearances[appearanceIndex].id;\n// }\n\n// function generateBackground () {\n//   const backgroundIndex = Math.floor(Math.random() * (dropdownOptions.value.backgrounds.length));\n//   return dropdownOptions.value.backgrounds[backgroundIndex].id;\n// }\n\n// function generateCharacterClass () {\n//   const characterClassIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n//   return dropdownOptions.value.ancestries[characterClassIndex].id;\n// }\n\n// function generateCharacterSubclass () {\n//   fetchCharacterSubclasses(characterClassId, (characterSubclasses) => { cardDropdownOptions.value.characterSubclasses = characterSubclasses });\n//   const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.value.characterSubclasses.length);\n//   return cardDropdownOptions.value.characterSubclasses[subclassIndex];\n// }\n\n// function generateLineage () {\n//   fetchLineages(ancestryId, (lineages) => { cardDropdownOptions.value.lineages = lineages })\n//   const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.value.lineages.length);\n//   return cardDropdownOptions.value.lineages[lineageIndex];\n// }\n\n// function rollNewCharacter () {\n//   Object.keys(baseOptions).forEach(key => {\n//     if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n//       setCardSelectedOptions(key, generatorSelectedOptions[key]);\n//     } else {\n//       switch (key) {\n//         case ancestry:\n//           setCardSelectedOptions(key, generateAncestry());\n//           break;\n//         case appearance:\n//           setCardSelectedOptions(key, generateAppearance());\n//           break;\n//         case background:\n//           setCardSelectedOptions(key, generateBackground());\n//           break;\n//         case characterClass:\n//           setCardSelectedOptions(key, generateCharacterClass());\n//           break;\n//         default:\n//           break;\n//       }\n//     }\n//   });\n\n//   Object.keys(subOptions).forEach(key => {\n//     if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n//       setCardSelectedOptions(key, generatorSelectedOptions[key]);\n//     } else {\n//       switch (key) {\n//         case lineage:\n//           setCardSelectedOptions(key, generateLineage);\n//           break;\n//         case characterSubclass:\n//           setCardSelectedOptions(key, generateCharacterSubclass);\n//           break;\n//         default:\n//           break;\n//       }\n//     }\n//   });\n// }\n</script>\n\n<style scoped lang=\"scss\">\n@import \"./CharacterGeneratorPage.scss\";\n</style>\n"],"mappings":"AAOA,SAASA,MAAM,QAAQ,KAAK;AAE5B,OAAOC,2BAA2B,MAAM,mCAAmC;AAC3E,OAAOC,gBAAgB,MAAM,+BAA+B;;;;;;;;;;IAE5D,MAAMC,KAAK,GAAGC,OAEZ;;IAEF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}