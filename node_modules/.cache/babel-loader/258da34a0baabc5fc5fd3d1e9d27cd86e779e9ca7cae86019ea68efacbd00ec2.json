{"ast":null,"code":"import { ref, reactive } from 'vue';\nimport CharacterGeneratorRoller from './CharacterGeneratorRoller.vue';\nimport CharacterCard from '../Cards/CharacterCard.vue';\nconst baseUrl = 'http://localhost:3000/api/v1/character_generator';\nexport default {\n  __name: 'CharacterGeneratorPage',\n  props: {\n    gameSystemKey: String\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const loading = ref(true);\n    const gameSystem = reactive({});\n    const dropdownOptions = reactive({});\n\n    // Move into api file?\n    function fetchBaseData() {\n      fetch(`${baseUrl}/base_data/${gameSystem.value.id}`, {\n        method: 'get'\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        dropdownOptions.value = {\n          ancestries: res.ancestries || [],\n          characterClasses: res.player_classes || [],\n          nameStyles: res.name_styles || [],\n          backgrounds: res.backgrounds || [],\n          appearances: res.appearances || []\n        };\n      });\n      loading.value = false;\n    }\n    fetch(`${baseUrl}/game_system/${props.gameSystemKey}`, {\n      method: 'get'\n    }).then(res => {\n      return res.json();\n    }).then(res => {\n      gameSystem.value = res.game_system;\n      fetchBaseData();\n    });\n    const baseOptions = {\n      ancestry: null,\n      appearance: null,\n      background: null,\n      characterClass: null\n    };\n    const subOptions = {\n      lineage: null,\n      characterSubclass: null\n    };\n    const generatorSpecific = {\n      nameGender: 'any',\n      nameStyle: null\n    };\n\n    // Generator data\n    const generatorSelectedOptions = reactive({\n      ...baseOptions,\n      ...subOptions,\n      ...generatorSpecific\n    });\n    const generatorDropdownOptions = reactive({\n      characterSubclasses: [],\n      lineages: []\n    });\n\n    // Card data\n    const cardSelectedOptions = reactive({\n      ...baseOptions,\n      ...subOptions\n    });\n    const cardDropdownOptions = reactive({\n      characterSubclasses: [],\n      lineages: []\n    });\n\n    // Fetch data as selections change\n    function fetchLineages(ancestryId) {\n      return fetch(`${baseUrl}/lineages/${gameSystem.value.id}/${ancestryId}`, {\n        method: 'get'\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        return res.lineages;\n      });\n    }\n    function fetchCharacterSubclasses(characterClassId) {\n      return fetch(`${baseUrl}/player_subclasses/${gameSystem.value.id}/${characterClassId}`, {\n        method: 'get'\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        return res.player_subclasses;\n      });\n    }\n\n    // Update data\n    function selectAncestry(newAncestry) {\n      generatorSelectedOptions.ancestry = newAncestry;\n      fetchLineages(newAncestry).then(res => {\n        generatorDropdownOptions.lineages = res;\n      });\n    }\n    function selectCharacterClass(newCharacterClass) {\n      generatorSelectedOptions.characterClass = newCharacterClass;\n      fetchCharacterSubclasses(newCharacterClass).then(res => {\n        generatorDropdownOptions.characterSubclasses = res;\n      });\n    }\n\n    // Character generation\n    function generateAncestry() {\n      const ancestryIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n      const ancestryId = dropdownOptions.value.ancestries[ancestryIndex].id;\n      generateLineage(ancestryId);\n      return ancestryId;\n    }\n    function generateAppearance() {\n      const appearanceIndex = Math.floor(Math.random() * dropdownOptions.value.appearances.length);\n      return dropdownOptions.value.appearances[appearanceIndex].id;\n    }\n    function generateBackground() {\n      const backgroundIndex = Math.floor(Math.random() * dropdownOptions.value.backgrounds.length);\n      return dropdownOptions.value.backgrounds[backgroundIndex].id;\n    }\n    function generateCharacterClass() {\n      const characterClassIndex = Math.floor(Math.random() * dropdownOptions.value.characterClasses.length);\n      const characterClassId = dropdownOptions.value.characterClasses[characterClassIndex].id;\n      generateCharacterSubclass(characterClassId);\n      return characterClassId;\n    }\n    function generateCharacterSubclass(characterClassId) {\n      if (generatorSelectedOptions.characterSubclass) {\n        cardSelectedOptions.characterSubclass = generatorSelectedOptions.characterSubclass;\n      } else if (generatorDropdownOptions.characterSubclasses.length) {\n        cardDropdownOptions.characterSubclasses = generatorDropdownOptions.characterSubclasses;\n        const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.characterSubclasses.length);\n        cardSelectedOptions.characterSubclass = cardDropdownOptions.characterSubclasses[subclassIndex];\n      } else {\n        fetchCharacterSubclasses(characterClassId).then(res => {\n          cardDropdownOptions.characterSubclasses = res;\n          const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.characterSubclasses.length);\n          cardSelectedOptions.characterSubclass = cardDropdownOptions.characterSubclasses[subclassIndex];\n        });\n      }\n    }\n    function generateLineage(ancestryId) {\n      if (generatorSelectedOptions.lineage) {\n        cardSelectedOptions.lineage = generatorSelectedOptions.lineage;\n      } else if (generatorDropdownOptions.lineages.length) {\n        cardDropdownOptions.lineages = generatorDropdownOptions.lineages;\n        const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.lineages.length);\n        cardSelectedOptions.lineage = cardDropdownOptions.lineages[lineageIndex];\n      } else {\n        fetchLineages(ancestryId).then(res => {\n          cardDropdownOptions.lineages = res;\n          const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.lineages.length);\n          cardSelectedOptions.lineage = cardDropdownOptions.lineages[lineageIndex];\n        });\n      }\n    }\n    function rollNewCharacter() {\n      Object.keys(baseOptions).forEach(key => {\n        if (generatorSelectedOptions[key]) {\n          cardSelectedOptions[key] = generatorSelectedOptions[key];\n\n          // TODO: Abstract out keys\n          if (key === 'ancestry') {\n            generateLineage(generatorSelectedOptions[key].id);\n          } else if (key === 'characterClass') {\n            generateCharacterSubclass(generatorSelectedOptions[key].id);\n          }\n        } else {\n          switch (key) {\n            case 'ancestry':\n              cardSelectedOptions[key] = generateAncestry();\n              break;\n            case 'appearance':\n              cardSelectedOptions[key] = generateAppearance();\n              break;\n            case 'background':\n              cardSelectedOptions[key] = generateBackground();\n              break;\n            case 'characterClass':\n              cardSelectedOptions[key] = generateCharacterClass();\n              break;\n            case 'nameStyles':\n            default:\n              break;\n          }\n        }\n      });\n    }\n    const __returned__ = {\n      props,\n      loading,\n      baseUrl,\n      gameSystem,\n      dropdownOptions,\n      fetchBaseData,\n      baseOptions,\n      subOptions,\n      generatorSpecific,\n      generatorSelectedOptions,\n      generatorDropdownOptions,\n      cardSelectedOptions,\n      cardDropdownOptions,\n      fetchLineages,\n      fetchCharacterSubclasses,\n      selectAncestry,\n      selectCharacterClass,\n      generateAncestry,\n      generateAppearance,\n      generateBackground,\n      generateCharacterClass,\n      generateCharacterSubclass,\n      generateLineage,\n      rollNewCharacter,\n      ref,\n      reactive,\n      CharacterGeneratorRoller,\n      CharacterCard\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","CharacterGeneratorRoller","CharacterCard","baseUrl","props","__props","loading","gameSystem","dropdownOptions","fetchBaseData","fetch","value","id","method","then","res","json","ancestries","characterClasses","player_classes","nameStyles","name_styles","backgrounds","appearances","gameSystemKey","game_system","baseOptions","ancestry","appearance","background","characterClass","subOptions","lineage","characterSubclass","generatorSpecific","nameGender","nameStyle","generatorSelectedOptions","generatorDropdownOptions","characterSubclasses","lineages","cardSelectedOptions","cardDropdownOptions","fetchLineages","ancestryId","fetchCharacterSubclasses","characterClassId","player_subclasses","selectAncestry","newAncestry","selectCharacterClass","newCharacterClass","generateAncestry","ancestryIndex","Math","floor","random","length","generateLineage","generateAppearance","appearanceIndex","generateBackground","backgroundIndex","generateCharacterClass","characterClassIndex","generateCharacterSubclass","subclassIndex","lineageIndex","rollNewCharacter","Object","keys","forEach","key"],"sources":["/Users/lappy486/Code/pwf-games/src/components/CharacterGenerators/CharacterGeneratorPage.vue"],"sourcesContent":["<template>\n  <div class=\"character-generator-page\">\n    <CharacterGeneratorRoller :gameSystemName=\"gameSystem.value?.name\"\n                                 :loading=\"loading\"\n                                 :dropdownOptions=\"dropdownOptions\"\n                                 :generatorDropdownOptions=\"generatorDropdownOptions\"\n                                 @rollCharacter=\"rollNewCharacter()\"\n                                 @setNameStyle=\"e => generatorSelectedOptions.nameStyle = e\"\n                                 @setNameGender=\"e => generatorSelectedOptions.nameGender = e\"\n                                 @setAncestry=\"e => selectAncestry(e)\" \n                                 @setClass=\"e => selectCharacterClass(e)\" \n                                 @setBackground=\"e => generatorSelectedOptions.background = e\" \n                                 @setLineage=\"e => generatorSelectedOptions.lineage = e\" \n                                 @setSubclass=\"e => generatorSelectedOptions.characterSubclass = e\" \n                                 @setAppearance=\"e => generatorSelectedOptions.appearance = e\" />\n    <CharacterCard :dropdownOptions=\"dropdownOptions\"\n                      :cardDropdownOptions=\"cardDropdownOptions\"\n                      :generatorSelectedOptions=\"generatorSelectedOptions\"\n                      :selectedOptions=\"cardSelectedOptions\"\n                      :loading=\"loading\" />\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive } from 'vue'\n\nimport CharacterGeneratorRoller from './CharacterGeneratorRoller.vue';\nimport CharacterCard from '../Cards/CharacterCard.vue';\n\nconst props = defineProps({\n  gameSystemKey: String\n});\n\nconst loading = ref(true);\nconst baseUrl = 'http://localhost:3000/api/v1/character_generator';\nconst gameSystem = reactive({});\nconst dropdownOptions = reactive({});\n\n// Move into api file?\nfunction fetchBaseData () {\n  fetch(`${baseUrl}/base_data/${gameSystem.value.id}`, {\n    method: 'get'\n  }).then((res) => {\n    return res.json();\n  }).then((res) => {\n    dropdownOptions.value = {\n      ancestries: res.ancestries || [],\n      characterClasses: res.player_classes || [],\n      nameStyles: res.name_styles || [],\n      backgrounds: res.backgrounds || [],\n      appearances: res.appearances || []\n    }\n  });\n  loading.value = false;\n}\n\nfetch(`${baseUrl}/game_system/${props.gameSystemKey}`, {\n  method: 'get'\n}).then((res) => {\n  return res.json();\n}).then((res) => {\n  gameSystem.value = res.game_system;\n  fetchBaseData();\n});\n\nconst baseOptions = {\n  ancestry: null,\n  appearance: null,\n  background: null,\n  characterClass: null\n};\nconst subOptions = {\n  lineage: null,\n  characterSubclass: null\n};\nconst generatorSpecific = {\n  nameGender: 'any',\n  nameStyle: null\n};\n\n// Generator data\nconst generatorSelectedOptions = reactive({\n  ...baseOptions,\n  ...subOptions,\n  ...generatorSpecific\n});\n\nconst generatorDropdownOptions = reactive({\n  characterSubclasses: [],\n  lineages: []\n});\n\n// Card data\nconst cardSelectedOptions = reactive({\n  ...baseOptions,\n  ...subOptions\n});\n\nconst cardDropdownOptions = reactive({\n  characterSubclasses: [],\n  lineages: []\n});\n\n// Fetch data as selections change\nfunction fetchLineages (ancestryId) {\n  return fetch(`${baseUrl}/lineages/${gameSystem.value.id}/${ancestryId}`, {\n    method: 'get'\n  }).then((res) => {\n    return res.json();\n  }).then((res) => {\n    return res.lineages;\n  });\n}\n\nfunction fetchCharacterSubclasses (characterClassId) {\n  return fetch(`${baseUrl}/player_subclasses/${gameSystem.value.id}/${characterClassId}`, {\n    method: 'get'\n  }).then((res) => {\n    return res.json();\n  }).then((res) => {\n    return res.player_subclasses;\n  });\n}\n\n// Update data\nfunction selectAncestry (newAncestry) {\n  generatorSelectedOptions.ancestry = newAncestry;\n  fetchLineages(newAncestry).then(res => {\n    generatorDropdownOptions.lineages = res;\n  });\n}\n\nfunction selectCharacterClass (newCharacterClass) {\n  generatorSelectedOptions.characterClass = newCharacterClass;\n  fetchCharacterSubclasses(newCharacterClass).then(res => {\n    generatorDropdownOptions.characterSubclasses = res;\n  });\n}\n\n// Character generation\nfunction generateAncestry () {\n  const ancestryIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n  const ancestryId = dropdownOptions.value.ancestries[ancestryIndex].id;\n  generateLineage(ancestryId);\n  return ancestryId;\n}\n\nfunction generateAppearance () {\n  const appearanceIndex = Math.floor(Math.random() * (dropdownOptions.value.appearances.length));\n  return dropdownOptions.value.appearances[appearanceIndex].id;\n}\n\nfunction generateBackground () {\n  const backgroundIndex = Math.floor(Math.random() * (dropdownOptions.value.backgrounds.length));\n  return dropdownOptions.value.backgrounds[backgroundIndex].id;\n}\n\nfunction generateCharacterClass () {\n  const characterClassIndex = Math.floor(Math.random() * dropdownOptions.value.characterClasses.length);\n  const characterClassId = dropdownOptions.value.characterClasses[characterClassIndex].id;\n  generateCharacterSubclass(characterClassId);\n  return characterClassId;\n}\n\nfunction generateCharacterSubclass (characterClassId) {\n  if (generatorSelectedOptions.characterSubclass) {\n    cardSelectedOptions.characterSubclass = generatorSelectedOptions.characterSubclass;\n  } else if (generatorDropdownOptions.characterSubclasses.length) {\n    cardDropdownOptions.characterSubclasses = generatorDropdownOptions.characterSubclasses;\n    const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.characterSubclasses.length);\n    cardSelectedOptions.characterSubclass = cardDropdownOptions.characterSubclasses[subclassIndex];\n  } else {\n    fetchCharacterSubclasses(characterClassId).then(res => {\n      cardDropdownOptions.characterSubclasses = res;\n      const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.characterSubclasses.length);\n      cardSelectedOptions.characterSubclass = cardDropdownOptions.characterSubclasses[subclassIndex];\n    });\n  }\n}\n\nfunction generateLineage (ancestryId) {\n  if (generatorSelectedOptions.lineage) {\n    cardSelectedOptions.lineage = generatorSelectedOptions.lineage;\n  } else if (generatorDropdownOptions.lineages.length) {\n    cardDropdownOptions.lineages = generatorDropdownOptions.lineages;\n    const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.lineages.length);\n    cardSelectedOptions.lineage = cardDropdownOptions.lineages[lineageIndex];\n  } else {\n    fetchLineages(ancestryId).then(res => {\n      cardDropdownOptions.lineages = res;\n      const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.lineages.length);\n      cardSelectedOptions.lineage = cardDropdownOptions.lineages[lineageIndex];\n    });\n  }\n}\n\nfunction rollNewCharacter () {\n  Object.keys(baseOptions).forEach(key => {\n    if (generatorSelectedOptions[key]) {\n      cardSelectedOptions[key] = generatorSelectedOptions[key];\n\n      // TODO: Abstract out keys\n      if (key === 'ancestry') {\n        generateLineage(generatorSelectedOptions[key].id);\n      } else if (key === 'characterClass') {\n        generateCharacterSubclass(generatorSelectedOptions[key].id);\n      }\n    }\n    else {\n      switch (key) {\n        case 'ancestry':\n          cardSelectedOptions[key] = generateAncestry();\n          break;\n        case 'appearance':\n          cardSelectedOptions[key] = generateAppearance();\n          break;\n        case 'background':\n          cardSelectedOptions[key] = generateBackground();\n          break;\n        case 'characterClass':\n          cardSelectedOptions[key] = generateCharacterClass();\n          break;\n        case 'nameStyles':\n          \n        default:\n          break;\n      }\n    }\n  });\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"./CharacterGeneratorPage.scss\";\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}