{"ast":null,"code":"import { inject } from 'vue';\nimport CharacterGeneratorRollerNew from './CharacterGeneratorRollerNew.vue';\nimport CharacterCardNew from '../Cards/CharacterCardNew.vue';\nexport default {\n  __name: 'CharacterGeneratorNew',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const {\n      gameSystem,\n      dropdownOptions,\n      fetchLineages,\n      fetchCharacterSubclasses\n    } = inject('generatorData');\n    const {\n      generatorSelectedOptions,\n      setGeneratorSelectedOptions\n    } = inject('generatorSelected');\n    const {\n      cardSelectedOptions,\n      setCardSelectedOptions,\n      cardDropdownOptions\n    } = inject('cardOptions');\n    const {\n      baseOptions,\n      subOptions\n    } = inject('generatorOptions');\n    function generateAncestry() {\n      const ancestryIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n      const ancestryId = dropdownOptions.value.ancestries[ancestryIndex].id;\n      return ancestryId;\n    }\n    function generateAppearance() {\n      const appearanceIndex = Math.floor(Math.random() * dropdownOptions.value.appearances.length);\n      return dropdownOptions.value.appearances[appearanceIndex].id;\n    }\n    function generateBackground() {\n      const backgroundIndex = Math.floor(Math.random() * dropdownOptions.value.backgrounds.length);\n      return dropdownOptions.value.backgrounds[backgroundIndex].id;\n    }\n    function generateCharacterClass() {\n      const characterClassIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n      return dropdownOptions.value.ancestries[characterClassIndex].id;\n    }\n    function generateCharacterSubclass() {\n      fetchCharacterSubclasses(characterClassId, characterSubclasses => {\n        cardDropdownOptions.value.characterSubclasses = characterSubclasses;\n      });\n      const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.value.characterSubclasses.length);\n      return cardDropdownOptions.value.characterSubclasses[subclassIndex];\n    }\n    function generateLineage() {\n      fetchLineages(ancestryId, lineages => {\n        cardDropdownOptions.value.lineages = lineages;\n      });\n      const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.value.lineages.length);\n      return cardDropdownOptions.value.lineages[lineageIndex];\n    }\n    function rollNewCharacter() {\n      Object.keys(baseOptions).forEach(key => {\n        if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n          setCardSelectedOptions(key, generatorSelectedOptions[key]);\n        } else {\n          switch (key) {\n            case ancestry:\n              setCardSelectedOptions(key, generateAncestry());\n              break;\n            case appearance:\n              setCardSelectedOptions(key, generateAppearance());\n              break;\n            case background:\n              setCardSelectedOptions(key, generateBackground());\n              break;\n            case characterClass:\n              setCardSelectedOptions(key, generateCharacterClass());\n              break;\n            default:\n              break;\n          }\n        }\n      });\n      Object.keys(subOptions).forEach(key => {\n        if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n          setCardSelectedOptions(key, generatorSelectedOptions[key]);\n        } else {\n          switch (key) {\n            case lineage:\n              setCardSelectedOptions(key, generateLineage);\n              break;\n            case characterSubclass:\n              setCardSelectedOptions(key, generateCharacterSubclass);\n              break;\n            default:\n              break;\n          }\n        }\n      });\n    }\n    const __returned__ = {\n      gameSystem,\n      dropdownOptions,\n      fetchLineages,\n      fetchCharacterSubclasses,\n      generatorSelectedOptions,\n      setGeneratorSelectedOptions,\n      cardSelectedOptions,\n      setCardSelectedOptions,\n      cardDropdownOptions,\n      baseOptions,\n      subOptions,\n      generateAncestry,\n      generateAppearance,\n      generateBackground,\n      generateCharacterClass,\n      generateCharacterSubclass,\n      generateLineage,\n      rollNewCharacter,\n      inject,\n      CharacterGeneratorRollerNew,\n      CharacterCardNew\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["inject","CharacterGeneratorRollerNew","CharacterCardNew","gameSystem","dropdownOptions","fetchLineages","fetchCharacterSubclasses","generatorSelectedOptions","setGeneratorSelectedOptions","cardSelectedOptions","setCardSelectedOptions","cardDropdownOptions","baseOptions","subOptions","generateAncestry","ancestryIndex","Math","floor","random","value","ancestries","length","ancestryId","id","generateAppearance","appearanceIndex","appearances","generateBackground","backgroundIndex","backgrounds","generateCharacterClass","characterClassIndex","generateCharacterSubclass","characterClassId","characterSubclasses","subclassIndex","generateLineage","lineages","lineageIndex","rollNewCharacter","Object","keys","forEach","key","ancestry","appearance","background","characterClass","lineage","characterSubclass"],"sources":["/Users/lappy486/Code/pwf-games/src/components/CharacterGenerators/CharacterGeneratorNew.vue"],"sourcesContent":["<template>\n  <CharacterGeneratorRollerNew @rollCharacter={rollNewCharacter()} />\n  <CharacterCardNew />\n</template>\n\n<script setup>\nimport { inject } from 'vue'\n\nimport CharacterGeneratorRollerNew from './CharacterGeneratorRollerNew.vue';\nimport CharacterCardNew from '../Cards/CharacterCardNew.vue';\n\nconst { \n  gameSystem,\n  dropdownOptions,\n  fetchLineages,\n  fetchCharacterSubclasses\n} = inject('generatorData');\n\nconst { generatorSelectedOptions, setGeneratorSelectedOptions } = inject('generatorSelected');\nconst { cardSelectedOptions, setCardSelectedOptions, cardDropdownOptions } = inject('cardOptions');\nconst { baseOptions, subOptions } = inject('generatorOptions');\n\nfunction generateAncestry () {\n  const ancestryIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n  const ancestryId = dropdownOptions.value.ancestries[ancestryIndex].id;\n  return ancestryId;\n}\n\nfunction generateAppearance () {\n  const appearanceIndex = Math.floor(Math.random() * (dropdownOptions.value.appearances.length));\n  return dropdownOptions.value.appearances[appearanceIndex].id;\n}\n\nfunction generateBackground () {\n  const backgroundIndex = Math.floor(Math.random() * (dropdownOptions.value.backgrounds.length));\n  return dropdownOptions.value.backgrounds[backgroundIndex].id;\n}\n\nfunction generateCharacterClass () {\n  const characterClassIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n  return dropdownOptions.value.ancestries[characterClassIndex].id;\n}\n\nfunction generateCharacterSubclass () {\n  fetchCharacterSubclasses(characterClassId, (characterSubclasses) => { cardDropdownOptions.value.characterSubclasses = characterSubclasses });\n  const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.value.characterSubclasses.length);\n  return cardDropdownOptions.value.characterSubclasses[subclassIndex];\n}\n\nfunction generateLineage () {\n  fetchLineages(ancestryId, (lineages) => { cardDropdownOptions.value.lineages = lineages })\n  const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.value.lineages.length);\n  return cardDropdownOptions.value.lineages[lineageIndex];\n}\n\nfunction rollNewCharacter () {\n  Object.keys(baseOptions).forEach(key => {\n    if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n      setCardSelectedOptions(key, generatorSelectedOptions[key]);\n    } else {\n      switch (key) {\n        case ancestry:\n          setCardSelectedOptions(key, generateAncestry());\n          break;\n        case appearance:\n          setCardSelectedOptions(key, generateAppearance());\n          break;\n        case background:\n          setCardSelectedOptions(key, generateBackground());\n          break;\n        case characterClass:\n          setCardSelectedOptions(key, generateCharacterClass());\n          break;\n        default:\n          break;\n      }\n    }\n  });\n\n  Object.keys(subOptions).forEach(key => {\n    if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n      setCardSelectedOptions(key, generatorSelectedOptions[key]);\n    } else {\n      switch (key) {\n        case lineage:\n          setCardSelectedOptions(key, generateLineage);\n          break;\n        case characterSubclass:\n          setCardSelectedOptions(key, generateCharacterSubclass);\n          break;\n        default:\n          break;\n      }\n    }\n  });\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"./CharacterGeneratorPage.scss\";\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}