{"ast":null,"code":"import { inject } from 'vue';\nimport CharacterGeneratorRollerNew from './CharacterGeneratorRollerNew.vue';\nimport CharacterCardNew from '../Cards/CharacterCardNew.vue';\nexport default {\n  __name: 'CharacterGeneratorNew',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const {\n      dropdownOptions,\n      fetchLineages,\n      fetchCharacterSubclasses\n    } = inject('generatorData');\n\n    // const { generatorSelectedOptions } = inject('generatorSelected');\n    // const { cardSelectedOptions, setCardSelectedOptions, cardDropdownOptions } = inject('cardOptions');\n    // const { baseOptions, subOptions } = inject('generatorOptions');\n\n    // function generateAncestry () {\n    //   const ancestryIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n    //   const ancestryId = dropdownOptions.value.ancestries[ancestryIndex].id;\n    //   return ancestryId;\n    // }\n\n    // function generateAppearance () {\n    //   const appearanceIndex = Math.floor(Math.random() * (dropdownOptions.value.appearances.length));\n    //   return dropdownOptions.value.appearances[appearanceIndex].id;\n    // }\n\n    // function generateBackground () {\n    //   const backgroundIndex = Math.floor(Math.random() * (dropdownOptions.value.backgrounds.length));\n    //   return dropdownOptions.value.backgrounds[backgroundIndex].id;\n    // }\n\n    // function generateCharacterClass () {\n    //   const characterClassIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n    //   return dropdownOptions.value.ancestries[characterClassIndex].id;\n    // }\n\n    // function generateCharacterSubclass () {\n    //   fetchCharacterSubclasses(characterClassId, (characterSubclasses) => { cardDropdownOptions.value.characterSubclasses = characterSubclasses });\n    //   const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.value.characterSubclasses.length);\n    //   return cardDropdownOptions.value.characterSubclasses[subclassIndex];\n    // }\n\n    // function generateLineage () {\n    //   fetchLineages(ancestryId, (lineages) => { cardDropdownOptions.value.lineages = lineages })\n    //   const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.value.lineages.length);\n    //   return cardDropdownOptions.value.lineages[lineageIndex];\n    // }\n\n    // function rollNewCharacter () {\n    //   Object.keys(baseOptions).forEach(key => {\n    //     if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n    //       setCardSelectedOptions(key, generatorSelectedOptions[key]);\n    //     } else {\n    //       switch (key) {\n    //         case ancestry:\n    //           setCardSelectedOptions(key, generateAncestry());\n    //           break;\n    //         case appearance:\n    //           setCardSelectedOptions(key, generateAppearance());\n    //           break;\n    //         case background:\n    //           setCardSelectedOptions(key, generateBackground());\n    //           break;\n    //         case characterClass:\n    //           setCardSelectedOptions(key, generateCharacterClass());\n    //           break;\n    //         default:\n    //           break;\n    //       }\n    //     }\n    //   });\n\n    //   Object.keys(subOptions).forEach(key => {\n    //     if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n    //       setCardSelectedOptions(key, generatorSelectedOptions[key]);\n    //     } else {\n    //       switch (key) {\n    //         case lineage:\n    //           setCardSelectedOptions(key, generateLineage);\n    //           break;\n    //         case characterSubclass:\n    //           setCardSelectedOptions(key, generateCharacterSubclass);\n    //           break;\n    //         default:\n    //           break;\n    //       }\n    //     }\n    //   });\n    // }\n\n    const __returned__ = {\n      dropdownOptions,\n      fetchLineages,\n      fetchCharacterSubclasses,\n      inject,\n      CharacterGeneratorRollerNew,\n      CharacterCardNew\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["inject","CharacterGeneratorRollerNew","CharacterCardNew","dropdownOptions","fetchLineages","fetchCharacterSubclasses"],"sources":["/Users/lappy486/Code/pwf-games/src/components/CharacterGenerators/CharacterGeneratorNew.vue"],"sourcesContent":["<template>\n  <!-- <CharacterGeneratorRollerNew @rollCharacter={rollNewCharacter()} />\n  <CharacterCardNew /> -->\n  <div>Here</div>\n</template>\n\n<script setup>\nimport { inject } from 'vue'\n\nimport CharacterGeneratorRollerNew from './CharacterGeneratorRollerNew.vue';\nimport CharacterCardNew from '../Cards/CharacterCardNew.vue';\n\nconst { \n  dropdownOptions,\n  fetchLineages,\n  fetchCharacterSubclasses\n} = inject('generatorData');\n\n// const { generatorSelectedOptions } = inject('generatorSelected');\n// const { cardSelectedOptions, setCardSelectedOptions, cardDropdownOptions } = inject('cardOptions');\n// const { baseOptions, subOptions } = inject('generatorOptions');\n\n// function generateAncestry () {\n//   const ancestryIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n//   const ancestryId = dropdownOptions.value.ancestries[ancestryIndex].id;\n//   return ancestryId;\n// }\n\n// function generateAppearance () {\n//   const appearanceIndex = Math.floor(Math.random() * (dropdownOptions.value.appearances.length));\n//   return dropdownOptions.value.appearances[appearanceIndex].id;\n// }\n\n// function generateBackground () {\n//   const backgroundIndex = Math.floor(Math.random() * (dropdownOptions.value.backgrounds.length));\n//   return dropdownOptions.value.backgrounds[backgroundIndex].id;\n// }\n\n// function generateCharacterClass () {\n//   const characterClassIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n//   return dropdownOptions.value.ancestries[characterClassIndex].id;\n// }\n\n// function generateCharacterSubclass () {\n//   fetchCharacterSubclasses(characterClassId, (characterSubclasses) => { cardDropdownOptions.value.characterSubclasses = characterSubclasses });\n//   const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.value.characterSubclasses.length);\n//   return cardDropdownOptions.value.characterSubclasses[subclassIndex];\n// }\n\n// function generateLineage () {\n//   fetchLineages(ancestryId, (lineages) => { cardDropdownOptions.value.lineages = lineages })\n//   const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.value.lineages.length);\n//   return cardDropdownOptions.value.lineages[lineageIndex];\n// }\n\n// function rollNewCharacter () {\n//   Object.keys(baseOptions).forEach(key => {\n//     if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n//       setCardSelectedOptions(key, generatorSelectedOptions[key]);\n//     } else {\n//       switch (key) {\n//         case ancestry:\n//           setCardSelectedOptions(key, generateAncestry());\n//           break;\n//         case appearance:\n//           setCardSelectedOptions(key, generateAppearance());\n//           break;\n//         case background:\n//           setCardSelectedOptions(key, generateBackground());\n//           break;\n//         case characterClass:\n//           setCardSelectedOptions(key, generateCharacterClass());\n//           break;\n//         default:\n//           break;\n//       }\n//     }\n//   });\n\n//   Object.keys(subOptions).forEach(key => {\n//     if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n//       setCardSelectedOptions(key, generatorSelectedOptions[key]);\n//     } else {\n//       switch (key) {\n//         case lineage:\n//           setCardSelectedOptions(key, generateLineage);\n//           break;\n//         case characterSubclass:\n//           setCardSelectedOptions(key, generateCharacterSubclass);\n//           break;\n//         default:\n//           break;\n//       }\n//     }\n//   });\n// }\n</script>\n\n<style scoped lang=\"scss\">\n@import \"./CharacterGeneratorPage.scss\";\n</style>\n"],"mappings":"AAOA,SAASA,MAAM,QAAQ,KAAK;AAE5B,OAAOC,2BAA2B,MAAM,mCAAmC;AAC3E,OAAOC,gBAAgB,MAAM,+BAA+B;;;;;;;IAE5D,MAAM;MACJC,eAAe;MACfC,aAAa;MACbC;IACF,CAAC,GAAGL,MAAM,CAAC,eAAe,CAAC;;IAE3B;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}