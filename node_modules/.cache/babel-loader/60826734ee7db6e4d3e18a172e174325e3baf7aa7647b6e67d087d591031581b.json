{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2c33e9f0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, \"Here\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createCommentVNode(\" <CharacterGeneratorRollerNew @rollCharacter=\\\"rollNewCharacter()\\\" /> \"), _createVNode($setup[\"CharacterCardNew\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_hoisted_1","_createCommentVNode","_createVNode","$setup"],"sources":["/Users/lappy486/Code/pwf-games/src/components/CharacterGenerators/CharacterGeneratorNew.vue"],"sourcesContent":["<template>\n  <div>Here</div>\n  <!-- <CharacterGeneratorRollerNew @rollCharacter=\"rollNewCharacter()\" /> -->\n  <CharacterCardNew />\n</template>\n\n<script setup>\nimport { provide, ref } from 'vue'\n\nimport CharacterGeneratorRollerNew from './CharacterGeneratorRollerNew.vue';\nimport CharacterCardNew from '../Cards/CharacterCardNew.vue';\n\nconst props = defineProps({\n  gameSystemKey: String\n})\n\nconst baseUrl = 'http://localhost:3000/api/v1/character_generator';\nconst gameSystem = ref({});\nconst dropdownOptions = ref({\n  ancestries: [],\n  lineages: [],\n  appearances: [],\n  backgrounds: [],\n  characterClasses: [],\n  characterSubclasses: [],\n  nameGenders: [],\n  nameStyles: [],\n});\n\nawait fetch(`${baseUrl}/game_system/${props.gameSystemKey}`, {\n  method: 'get'\n}).then((res) => {\n  return res.json();\n}).then((res) => {\n  gameSystem.value = res.game_system;\n});\n\n// fetch(`${baseUrl}/base_data/${gameSystem.value.id}`, {\n//   method: 'get'\n// }).then((res) => {\n//   return res.json();\n// }).then((res) => {\n//   dropdownOptions.value.ancestries = res.ancestries;\n//   dropdownOptions.value.characterClasses = res.player_classes;\n//   dropdownOptions.value.nameGenders = res.gender_options;\n//   dropdownOptions.value.nameStyles = res.name_styles;\n//   dropdownOptions.value.backgrounds = res.backgrounds;\n//   dropdownOptions.value.appearances = res.appearances;\n// });\n\n// const baseOptions = {\n//   ancestry: null,\n//   appearance: null,\n//   background: null,\n//   characterClass: null\n// };\n// const subOptions = {\n//   lineage: null,\n//   characterSubclass: null\n// };\n// const generatorSpecific = {\n//   nameGender: 'any',\n//   nameStyle: null\n// };\n\n// // Generator selected data\n\n// const generatorSelectedOptions = ref({\n//   ...baseOptions,\n//   ...subOptions,\n//   ...generatorSpecific\n// });\n\n// function setGeneratorSelectedOptions (optionKey, newVal) {\n//   // TODO: stronger typing\n//   generatorSelectedOptions[optionKey] = newVal;\n// }\n\n// // Need to be able to call for generator OR card :/\n// function fetchLineages () {\n//   fetch(`${baseUrl}/lineages/${gameSystem.value.id}/${generatorSelectedOptions.value.ancestry}`, {\n//     method: 'get'\n//   }).then((res) => {\n//     return res.json();\n//   }).then((res) => {\n//     cardDropdownOptions.value.lineages = res.lineages;\n//   });\n// }\n\n// function fetchCharacterSubclasses () {\n//   fetch(`${baseUrl}/player_subclasses/${gameSystem.value.id}/${generatorSelectedOptions.value.characterClass}`, {\n//     method: 'get'\n//   }).then((res) => {\n//     return res.json();\n//   }).then((res) => {\n//     cardDropdownOptions.value.characterSubclasses = res.player_subclasses;\n//   });\n// }\n\n// provide('generatorData', { gameSystem, dropdownOptions, fetchLineages, fetchCharacterSubclasses });\n// provide('generatorSelected', { generatorSelectedOptions, setGeneratorSelectedOptions });\n\n// // Card selected data\n// const cardSelectedOptions = ref({\n//   ...baseOptions,\n//   ...subOptions\n// });\n\n// function setCardSelectedOptions (optionKey, newVal) {\n//   // TODO: stronger typing\n//   cardSelectedOptions[optionKey] = newVal;\n// }\n\n// const cardDropdownOptions = ref({\n//   characterSubclasses: [],\n//   lineages: []\n// });\n\n// function generateAncestry () {\n//   const ancestryIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n//   const ancestryId = dropdownOptions.value.ancestries[ancestryIndex].id;\n//   return ancestryId;\n// }\n\n// function generateAppearance () {\n//   const appearanceIndex = Math.floor(Math.random() * (dropdownOptions.value.appearances.length));\n//   return dropdownOptions.value.appearances[appearanceIndex].id;\n// }\n\n// function generateBackground () {\n//   const backgroundIndex = Math.floor(Math.random() * (dropdownOptions.value.backgrounds.length));\n//   return dropdownOptions.value.backgrounds[backgroundIndex].id;\n// }\n\n// function generateCharacterClass () {\n//   const characterClassIndex = Math.floor(Math.random() * dropdownOptions.value.ancestries.length);\n//   return dropdownOptions.value.ancestries[characterClassIndex].id;\n// }\n\n// function generateCharacterSubclass () {\n//   fetchCharacterSubclasses(baseOptions.value.characterClass, (characterSubclasses) => { cardDropdownOptions.value.characterSubclasses = characterSubclasses });\n//   const subclassIndex = Math.floor(Math.random() * cardDropdownOptions.value.characterSubclasses.length);\n//   return cardDropdownOptions.value.characterSubclasses[subclassIndex];\n// }\n\n// function generateLineage () {\n//   fetchLineages(baseOptions.value.ancestry, (lineages) => { cardDropdownOptions.value.lineages = lineages })\n//   const lineageIndex = Math.floor(Math.random() * cardDropdownOptions.value.lineages.length);\n//   return cardDropdownOptions.value.lineages[lineageIndex];\n// }\n\n// function rollNewCharacter () {\n//   Object.keys(baseOptions.value).forEach(key => {\n//     if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n//       setCardSelectedOptions(key, generatorSelectedOptions[key]);\n//     } else {\n//       switch (key) {\n//         case 'ancestry':\n//           setCardSelectedOptions(key, generateAncestry());\n//           break;\n//         case 'appearance':\n//           setCardSelectedOptions(key, generateAppearance());\n//           break;\n//         case 'background':\n//           setCardSelectedOptions(key, generateBackground());\n//           break;\n//         case 'characterClass':\n//           setCardSelectedOptions(key, generateCharacterClass());\n//           break;\n//         default:\n//           break;\n//       }\n//     }\n//   });\n\n//   Object.keys(subOptions).forEach(key => {\n//     if (generatorSelectedOptions[key] !== cardSelectedOptions[key]) {\n//       setCardSelectedOptions(key, generatorSelectedOptions[key]);\n//     } else {\n//       switch (key) {\n//         case 'lineage':\n//           setCardSelectedOptions(key, generateLineage);\n//           break;\n//         case 'characterSubclass':\n//           setCardSelectedOptions(key, generateCharacterSubclass);\n//           break;\n//         default:\n//           break;\n//       }\n//     }\n//   });\n// }\n</script>\n\n<style scoped lang=\"scss\">\n@import \"./CharacterGeneratorPage.scss\";\n</style>\n"],"mappings":";;gEACEA,mBAAA,CAAe,aAAV,MAAI;;;6DAATC,UAAe,EACfC,mBAAA,2EAA4E,EAC5EC,YAAA,CAAoBC,MAAA,sB"},"metadata":{},"sourceType":"module","externalDependencies":[]}